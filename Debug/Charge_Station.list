
Charge_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004838  08004838  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004838  08004838  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004838  08004838  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004840  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000018  08004854  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004854  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c972  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231b  00000000  00000000  0002c9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  0002fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018678  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f105  00000000  00000000  00048d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed53  00000000  00000000  00057e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6bc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000e6c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080047e8 	.word	0x080047e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080047e8 	.word	0x080047e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <averageAll>:
#include "ConfigADC.h"

uint16_t averageAll(const uint16_t data[])
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  int sumOfElements = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  size_t size = sizeof(data)/sizeof(data[0]);
 8000a48:	2302      	movs	r3, #2
 8000a4a:	60fb      	str	r3, [r7, #12]
  for(size_t i = 0; i < size; ++i)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	e00b      	b.n	8000a6a <averageAll+0x2e>
  {
    sumOfElements += data[i];
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	4413      	add	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < size; ++i)
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	3301      	adds	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d3ef      	bcc.n	8000a52 <averageAll+0x16>
  }

  uint16_t result = sumOfElements / size;
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	817b      	strh	r3, [r7, #10]
  return result;
 8000a7c:	897b      	ldrh	r3, [r7, #10]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <adcToDutyCycle>:

uint16_t adcToDutyCycle(uint16_t averageData)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	uint16_t result;

	uint16_t R1 = 1; 	//1 kOm 	Параметры делителя напряжения
 8000a92:	2301      	movs	r3, #1
 8000a94:	82fb      	strh	r3, [r7, #22]
	uint16_t R2 = 100;	//100 kOm
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	82bb      	strh	r3, [r7, #20]
	uint16_t divider = 100/1;
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	827b      	strh	r3, [r7, #18]

	uint16_t coef = 3.3*(65/divider);
 8000a9e:	8a7b      	ldrh	r3, [r7, #18]
 8000aa0:	2241      	movs	r2, #65	; 0x41
 8000aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fca4 	bl	80003f4 <__aeabi_i2d>
 8000aac:	a312      	add	r3, pc, #72	; (adr r3, 8000af8 <adcToDutyCycle+0x70>)
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	f7ff fd09 	bl	80004c8 <__aeabi_dmul>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4610      	mov	r0, r2
 8000abc:	4619      	mov	r1, r3
 8000abe:	f7ff ff9d 	bl	80009fc <__aeabi_d2uiz>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	823b      	strh	r3, [r7, #16]
	result = (averageData*coef)/25.3;
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	8a3a      	ldrh	r2, [r7, #16]
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fc90 	bl	80003f4 <__aeabi_i2d>
 8000ad4:	a30a      	add	r3, pc, #40	; (adr r3, 8000b00 <adcToDutyCycle+0x78>)
 8000ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ada:	f7ff fe1f 	bl	800071c <__aeabi_ddiv>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f7ff ff89 	bl	80009fc <__aeabi_d2uiz>
 8000aea:	4603      	mov	r3, r0
 8000aec:	81fb      	strh	r3, [r7, #14]

	return result;
 8000aee:	89fb      	ldrh	r3, [r7, #14]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	66666666 	.word	0x66666666
 8000afc:	400a6666 	.word	0x400a6666
 8000b00:	cccccccd 	.word	0xcccccccd
 8000b04:	40394ccc 	.word	0x40394ccc

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 fc45 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f867 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 fa2b 	bl	8000f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1a:	f000 fa0b 	bl	8000f34 <MX_DMA_Init>
  MX_CAN_Init();
 8000b1e:	f000 f8fd 	bl	8000d1c <MX_CAN_Init>
  MX_TIM2_Init();
 8000b22:	f000 f92f 	bl	8000d84 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b26:	f000 f8b9 	bl	8000c9c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000b2a:	f000 f9ad 	bl	8000e88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000b2e:	4824      	ldr	r0, [pc, #144]	; (8000bc0 <main+0xb8>)
 8000b30:	f001 f858 	bl	8001be4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data, 10);
 8000b34:	220a      	movs	r2, #10
 8000b36:	4923      	ldr	r1, [pc, #140]	; (8000bc4 <main+0xbc>)
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <main+0xb8>)
 8000b3a:	f000 fd69 	bl	8001610 <HAL_ADC_Start_DMA>
  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 8000b3e:	210c      	movs	r1, #12
 8000b40:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <main+0xc0>)
 8000b42:	f002 fc91 	bl	8003468 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b46:	2100      	movs	r1, #0
 8000b48:	4820      	ldr	r0, [pc, #128]	; (8000bcc <main+0xc4>)
 8000b4a:	f002 fd87 	bl	800365c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b4e:	2104      	movs	r1, #4
 8000b50:	481e      	ldr	r0, [pc, #120]	; (8000bcc <main+0xc4>)
 8000b52:	f002 fd83 	bl	800365c <HAL_TIM_PWM_Start>
  Update_Duty_Cycle(50);
 8000b56:	2032      	movs	r0, #50	; 0x32
 8000b58:	f000 fa2c 	bl	8000fb4 <Update_Duty_Cycle>

  PID(&VoltagePID, &inputDutyCycle, &outputDutyCycle, &setpointDutyCycle, 0, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9307      	str	r3, [sp, #28]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9306      	str	r3, [sp, #24]
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b7c:	f04f 0200 	mov.w	r2, #0
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e9cd 2300 	strd	r2, r3, [sp]
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <main+0xc8>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <main+0xcc>)
 8000b8c:	4912      	ldr	r1, [pc, #72]	; (8000bd8 <main+0xd0>)
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <main+0xd4>)
 8000b90:	f003 fb1e 	bl	80041d0 <PID>

  PID_SetMode(&VoltagePID, _PID_MODE_AUTOMATIC);
 8000b94:	2101      	movs	r1, #1
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <main+0xd4>)
 8000b98:	f003 fc4c 	bl	8004434 <PID_SetMode>
  PID_SetSampleTime(&VoltagePID, 100);
 8000b9c:	2164      	movs	r1, #100	; 0x64
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <main+0xd4>)
 8000ba0:	f003 fdba 	bl	8004718 <PID_SetSampleTime>
  PID_SetOutputLimits(&VoltagePID, 0, 162);
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <main+0xd8>)
 8000baa:	e9cd 2300 	strd	r2, r3, [sp]
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <main+0xd4>)
 8000bb8:	f003 fc5a 	bl	8004470 <PID_SetOutputLimits>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0xb4>
 8000bbe:	bf00      	nop
 8000bc0:	200000a8 	.word	0x200000a8
 8000bc4:	200001e8 	.word	0x200001e8
 8000bc8:	2000018c 	.word	0x2000018c
 8000bcc:	20000144 	.word	0x20000144
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	200001e0 	.word	0x200001e0
 8000bd8:	200001d8 	.word	0x200001d8
 8000bdc:	20000038 	.word	0x20000038
 8000be0:	40644000 	.word	0x40644000

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fdf0 	bl	80047d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fdfa 	bl	8002834 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c46:	f000 fa05 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2102      	movs	r1, #2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f866 	bl	8002d38 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c72:	f000 f9ef 	bl	8001054 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	2302      	movs	r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f9dc 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c8e:	f000 f9e1 	bl	8001054 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3750      	adds	r7, #80	; 0x50
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cae:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <MX_ADC1_Init+0x7c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cc8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000ccc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cdc:	f000 fbc0 	bl	8001460 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ce6:	f000 f9b5 	bl	8001054 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cfc:	f000 fd78 	bl	80017f0 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f9a5 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000a8 	.word	0x200000a8
 8000d18:	40012400 	.word	0x40012400

08000d1c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <MX_CAN_Init+0x64>)
 8000d24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d28:	2210      	movs	r2, #16
 8000d2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_CAN_Init+0x60>)
 8000d6a:	f000 ffe7 	bl	8001d3c <HAL_CAN_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 f96e 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000011c 	.word	0x2000011c
 8000d80:	40006400 	.word	0x40006400

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 359;
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dca:	f240 1267 	movw	r2, #359	; 0x167
 8000dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ddc:	4829      	ldr	r0, [pc, #164]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dde:	f002 faa5 	bl	800332c <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000de8:	f000 f934 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4822      	ldr	r0, [pc, #136]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000dfa:	f002 fde7 	bl	80039cc <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e04:	f000 f926 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000e0a:	f002 fbcf 	bl	80035ac <HAL_TIM_PWM_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e14:	f000 f91e 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4619      	mov	r1, r3
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000e28:	f003 f938 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e32:	f000 f90f 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000e4e:	f002 fcff 	bl	8003850 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e58:	f000 f8fc 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2204      	movs	r2, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000e68:	f002 fcf2 	bl	8003850 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e72:	f000 f8ef 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM2_Init+0x100>)
 8000e78:	f000 fa02 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000e7c:	bf00      	nop
 8000e7e:	3738      	adds	r7, #56	; 0x38
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000144 	.word	0x20000144

08000e88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <MX_TIM4_Init+0xa8>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000ebe:	f240 1267 	movw	r2, #359	; 0x167
 8000ec2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000ed2:	f002 fa7a 	bl	80033ca <HAL_TIM_OC_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000edc:	f000 f8ba 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4619      	mov	r1, r3
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000ef0:	f003 f8d4 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000efa:	f000 f8ab 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000efe:	2330      	movs	r3, #48	; 0x30
 8000f00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	220c      	movs	r2, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM4_Init+0xa4>)
 8000f16:	f002 fc43 	bl	80037a0 <HAL_TIM_OC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f20:	f000 f898 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000018c 	.word	0x2000018c
 8000f30:	40000800 	.word	0x40000800

08000f34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_DMA_Init+0x38>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <MX_DMA_Init+0x38>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_DMA_Init+0x38>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	200b      	movs	r0, #11
 8000f58:	f001 f8c3 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f5c:	200b      	movs	r0, #11
 8000f5e:	f001 f8dc 	bl	800211a <HAL_NVIC_EnableIRQ>

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_GPIO_Init+0x40>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <MX_GPIO_Init+0x40>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_GPIO_Init+0x40>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_GPIO_Init+0x40>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <MX_GPIO_Init+0x40>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <MX_GPIO_Init+0x40>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <Update_Duty_Cycle>:

/* USER CODE BEGIN 4 */
void Update_Duty_Cycle(uint16_t DutyCycle)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
    TIM2->CCR2=DutyCycle;
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	6393      	str	r3, [r2, #56]	; 0x38
    TIM2->CCR1=TIM2->ARR-TIM2->CCR2;
 8000fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d120      	bne.n	8001038 <HAL_ADC_ConvCpltCallback+0x54>
    {
    	uint16_t averageData = averageAll(data);
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <HAL_ADC_ConvCpltCallback+0x60>)
 8000ff8:	f7ff fd20 	bl	8000a3c <averageAll>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	81fb      	strh	r3, [r7, #14]
    	inputDutyCycle = adcToDutyCycle(averageData);
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fd40 	bl	8000a88 <adcToDutyCycle>
 8001008:	4603      	mov	r3, r0
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f9e2 	bl	80003d4 <__aeabi_ui2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <HAL_ADC_ConvCpltCallback+0x64>)
 8001016:	e9c1 2300 	strd	r2, r3, [r1]
    	PID_Compute(&VoltagePID);
 800101a:	480c      	ldr	r0, [pc, #48]	; (800104c <HAL_ADC_ConvCpltCallback+0x68>)
 800101c:	f003 f920 	bl	8004260 <PID_Compute>
    	Update_Duty_Cycle(outputDutyCycle);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fce7 	bl	80009fc <__aeabi_d2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	b29b      	uxth	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffbe 	bl	8000fb4 <Update_Duty_Cycle>
    }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40012400 	.word	0x40012400
 8001044:	200001e8 	.word	0x200001e8
 8001048:	200001d8 	.word	0x200001d8
 800104c:	20000038 	.word	0x20000038
 8001050:	200001e0 	.word	0x200001e0

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_MspInit+0x40>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_MspInit+0x40>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_MspInit+0x40>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_MspInit+0x40>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_MspInit+0x40>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_MspInit+0x40>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <HAL_ADC_MspInit+0xbc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d149      	bne.n	8001158 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_ADC_MspInit+0xc0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <HAL_ADC_MspInit+0xc0>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_ADC_MspInit+0xc0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_ADC_MspInit+0xc0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <HAL_ADC_MspInit+0xc0>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_ADC_MspInit+0xc0>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f4:	2310      	movs	r3, #16
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	2303      	movs	r3, #3
 80010fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <HAL_ADC_MspInit+0xc4>)
 8001104:	f001 fa12 	bl	800252c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_ADC_MspInit+0xc8>)
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_ADC_MspInit+0xcc>)
 800110c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_ADC_MspInit+0xc8>)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_ADC_MspInit+0xc8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001132:	2220      	movs	r2, #32
 8001134:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_ADC_MspInit+0xc8>)
 800113e:	f001 f807 	bl	8002150 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001148:	f7ff ff84 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001150:	621a      	str	r2, [r3, #32]
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_ADC_MspInit+0xc8>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40012400 	.word	0x40012400
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800
 800116c:	200000d8 	.word	0x200000d8
 8001170:	40020008 	.word	0x40020008

08001174 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_CAN_MspInit+0x8c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d131      	bne.n	80011f8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_CAN_MspInit+0x90>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_CAN_MspInit+0x90>)
 800119a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119e:	61d3      	str	r3, [r2, #28]
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_CAN_MspInit+0x90>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_CAN_MspInit+0x90>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_CAN_MspInit+0x90>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_CAN_MspInit+0x90>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_CAN_MspInit+0x94>)
 80011da:	f001 f9a7 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_CAN_MspInit+0x94>)
 80011f4:	f001 f99a 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40006400 	.word	0x40006400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800121c:	d10b      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_TIM_Base_MspInit+0x34>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_TIM_Base_MspInit+0x34>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_TIM_Base_MspInit+0x34>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_TIM_OC_MspInit+0x34>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_OC_MspInit+0x38>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_TIM_OC_MspInit+0x38>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_TIM_OC_MspInit+0x38>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40000800 	.word	0x40000800
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129e:	d117      	bne.n	80012d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_TIM_MspPostInit+0x58>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_TIM_MspPostInit+0x58>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_TIM_MspPostInit+0x58>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <HAL_TIM_MspPostInit+0x5c>)
 80012cc:	f001 f92e 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001326:	f000 f87f 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Channel1_IRQHandler+0x10>)
 8001336:	f000 ffc5 	bl	80022c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000d8 	.word	0x200000d8

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001376:	f7ff ffe5 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f003 fa09 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff fbc3 	bl	8000b08 <main>
  bx lr
 8001382:	4770      	bx	lr
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800138c:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 8001390:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001394:	20000200 	.word	0x20000200

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x28>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 fe8d 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fe52 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fea5 	bl	8002136 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 fe6d 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000008 	.word	0x20000008
 8001420:	20000010 	.word	0x20000010
 8001424:	2000000c 	.word	0x2000000c

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000010 	.word	0x20000010
 8001448:	200001fc 	.word	0x200001fc

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	200001fc 	.word	0x200001fc

08001460 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0be      	b.n	8001600 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe00 	bl	80010a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 faf5 	bl	8001a94 <ADC_ConversionStop_Disable>
 80014aa:	4603      	mov	r3, r0
 80014ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 8099 	bne.w	80015ee <HAL_ADC_Init+0x18e>
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 8095 	bne.w	80015ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014cc:	f023 0302 	bic.w	r3, r3, #2
 80014d0:	f043 0202 	orr.w	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7b1b      	ldrb	r3, [r3, #12]
 80014e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f8:	d003      	beq.n	8001502 <HAL_ADC_Init+0xa2>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d102      	bne.n	8001508 <HAL_ADC_Init+0xa8>
 8001502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001506:	e000      	b.n	800150a <HAL_ADC_Init+0xaa>
 8001508:	2300      	movs	r3, #0
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7d1b      	ldrb	r3, [r3, #20]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d119      	bne.n	800154c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7b1b      	ldrb	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	3b01      	subs	r3, #1
 8001526:	035a      	lsls	r2, r3, #13
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	e00b      	b.n	800154c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_ADC_Init+0x1a8>)
 8001568:	4013      	ands	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	430b      	orrs	r3, r1
 8001572:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157c:	d003      	beq.n	8001586 <HAL_ADC_Init+0x126>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d104      	bne.n	8001590 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	3b01      	subs	r3, #1
 800158c:	051b      	lsls	r3, r3, #20
 800158e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_ADC_Init+0x1ac>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10b      	bne.n	80015cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f023 0303 	bic.w	r3, r3, #3
 80015c2:	f043 0201 	orr.w	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ca:	e018      	b.n	80015fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f023 0312 	bic.w	r3, r3, #18
 80015d4:	f043 0210 	orr.w	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ec:	e007      	b.n	80015fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	f043 0210 	orr.w	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	ffe1f7fd 	.word	0xffe1f7fd
 800160c:	ff1f0efe 	.word	0xff1f0efe

08001610 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a64      	ldr	r2, [pc, #400]	; (80017b8 <HAL_ADC_Start_DMA+0x1a8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d004      	beq.n	8001634 <HAL_ADC_Start_DMA+0x24>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a63      	ldr	r2, [pc, #396]	; (80017bc <HAL_ADC_Start_DMA+0x1ac>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d106      	bne.n	8001642 <HAL_ADC_Start_DMA+0x32>
 8001634:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <HAL_ADC_Start_DMA+0x1a8>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 80b3 	bne.w	80017a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_Start_DMA+0x40>
 800164c:	2302      	movs	r3, #2
 800164e:	e0ae      	b.n	80017ae <HAL_ADC_Start_DMA+0x19e>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f9c1 	bl	80019e0 <ADC_Enable>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f040 809a 	bne.w	800179e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <HAL_ADC_Start_DMA+0x1ac>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d105      	bne.n	8001694 <HAL_ADC_Start_DMA+0x84>
 8001688:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <HAL_ADC_Start_DMA+0x1a8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d115      	bne.n	80016c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d026      	beq.n	80016fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016be:	e01d      	b.n	80016fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a39      	ldr	r2, [pc, #228]	; (80017b8 <HAL_ADC_Start_DMA+0x1a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_ADC_Start_DMA+0xd0>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_ADC_Start_DMA+0x1ac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d10d      	bne.n	80016fc <HAL_ADC_Start_DMA+0xec>
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_ADC_Start_DMA+0x1a8>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f023 0206 	bic.w	r2, r3, #6
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
 8001714:	e002      	b.n	800171c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <HAL_ADC_Start_DMA+0x1b0>)
 800172a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <HAL_ADC_Start_DMA+0x1b4>)
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <HAL_ADC_Start_DMA+0x1b8>)
 800173a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0202 	mvn.w	r2, #2
 8001744:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001754:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a18      	ldr	r0, [r3, #32]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	334c      	adds	r3, #76	; 0x4c
 8001760:	4619      	mov	r1, r3
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f000 fd4d 	bl	8002204 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001774:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001778:	d108      	bne.n	800178c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001788:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800178a:	e00f      	b.n	80017ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800179a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800179c:	e006      	b.n	80017ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012400 	.word	0x40012400
 80017bc:	40012800 	.word	0x40012800
 80017c0:	08001b17 	.word	0x08001b17
 80017c4:	08001b93 	.word	0x08001b93
 80017c8:	08001baf 	.word	0x08001baf

080017cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x20>
 800180c:	2302      	movs	r3, #2
 800180e:	e0dc      	b.n	80019ca <HAL_ADC_ConfigChannel+0x1da>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b06      	cmp	r3, #6
 800181e:	d81c      	bhi.n	800185a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b05      	subs	r3, #5
 8001832:	221f      	movs	r2, #31
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	4019      	ands	r1, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	3b05      	subs	r3, #5
 800184c:	fa00 f203 	lsl.w	r2, r0, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	635a      	str	r2, [r3, #52]	; 0x34
 8001858:	e03c      	b.n	80018d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d81c      	bhi.n	800189c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3b23      	subs	r3, #35	; 0x23
 8001874:	221f      	movs	r2, #31
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	4019      	ands	r1, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b23      	subs	r3, #35	; 0x23
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	631a      	str	r2, [r3, #48]	; 0x30
 800189a:	e01b      	b.n	80018d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b41      	subs	r3, #65	; 0x41
 80018ae:	221f      	movs	r2, #31
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b41      	subs	r3, #65	; 0x41
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d91c      	bls.n	8001916 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	3b1e      	subs	r3, #30
 80018ee:	2207      	movs	r2, #7
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4019      	ands	r1, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6898      	ldr	r0, [r3, #8]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	3b1e      	subs	r3, #30
 8001908:	fa00 f203 	lsl.w	r2, r0, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	e019      	b.n	800194a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6919      	ldr	r1, [r3, #16]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	2207      	movs	r2, #7
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	4019      	ands	r1, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6898      	ldr	r0, [r3, #8]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b10      	cmp	r3, #16
 8001950:	d003      	beq.n	800195a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001956:	2b11      	cmp	r3, #17
 8001958:	d132      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d125      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d126      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001980:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d11a      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <HAL_ADC_ConfigChannel+0x1ec>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	0c9a      	lsrs	r2, r3, #18
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a0:	e002      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f9      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x1b2>
 80019ae:	e007      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f043 0220 	orr.w	r2, r3, #32
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40012400 	.word	0x40012400
 80019d8:	20000008 	.word	0x20000008
 80019dc:	431bde83 	.word	0x431bde83

080019e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d040      	beq.n	8001a80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <ADC_Enable+0xac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <ADC_Enable+0xb0>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a1c:	e002      	b.n	8001a24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a2a:	f7ff fd0f 	bl	800144c <HAL_GetTick>
 8001a2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a30:	e01f      	b.n	8001a72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a32:	f7ff fd0b 	bl	800144c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d918      	bls.n	8001a72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d011      	beq.n	8001a72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f043 0210 	orr.w	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e007      	b.n	8001a82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d1d8      	bne.n	8001a32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	431bde83 	.word	0x431bde83

08001a94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d12e      	bne.n	8001b0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0201 	bic.w	r2, r2, #1
 8001abc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001abe:	f7ff fcc5 	bl	800144c <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ac4:	e01b      	b.n	8001afe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ac6:	f7ff fcc1 	bl	800144c <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d914      	bls.n	8001afe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d10d      	bne.n	8001afe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e007      	b.n	8001b0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d0dc      	beq.n	8001ac6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d127      	bne.n	8001b80 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b4a:	d115      	bne.n	8001b78 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d111      	bne.n	8001b78 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fa33 	bl	8000fe4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b7e:	e004      	b.n	8001b8a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fe13 	bl	80017cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f043 0204 	orr.w	r2, r3, #4
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fe02 	bl	80017de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADCEx_Calibration_Start+0x1e>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e095      	b.n	8001d2e <HAL_ADCEx_Calibration_Start+0x14a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff42 	bl	8001a94 <ADC_ConversionStop_Disable>
 8001c10:	4603      	mov	r3, r0
 8001c12:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 8084 	bne.w	8001d24 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c24:	f023 0302 	bic.w	r3, r3, #2
 8001c28:	f043 0202 	orr.w	r2, r3, #2
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_ADCEx_Calibration_Start+0x154>)
 8001c32:	681c      	ldr	r4, [r3, #0]
 8001c34:	2002      	movs	r0, #2
 8001c36:	f001 fab9 	bl	80031ac <HAL_RCCEx_GetPeriphCLKFreq>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001c40:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001c42:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001c44:	e002      	b.n	8001c4c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fec4 	bl	80019e0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c68:	f7ff fbf0 	bl	800144c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c6e:	e01b      	b.n	8001ca8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c70:	f7ff fbec 	bl	800144c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b0a      	cmp	r3, #10
 8001c7c:	d914      	bls.n	8001ca8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f023 0312 	bic.w	r3, r3, #18
 8001c94:	f043 0210 	orr.w	r2, r3, #16
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e042      	b.n	8001d2e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1dc      	bne.n	8001c70 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0204 	orr.w	r2, r2, #4
 8001cc4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001cc6:	f7ff fbc1 	bl	800144c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ccc:	e01b      	b.n	8001d06 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001cce:	f7ff fbbd 	bl	800144c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b0a      	cmp	r3, #10
 8001cda:	d914      	bls.n	8001d06 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f023 0312 	bic.w	r3, r3, #18
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e013      	b.n	8001d2e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1dc      	bne.n	8001cce <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f023 0303 	bic.w	r3, r3, #3
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0ed      	b.n	8001f2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fa0a 	bl	8001174 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d70:	f7ff fb6c 	bl	800144c <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d76:	e012      	b.n	8001d9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d78:	f7ff fb68 	bl	800144c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d90b      	bls.n	8001d9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0c5      	b.n	8001f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0e5      	beq.n	8001d78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0202 	bic.w	r2, r2, #2
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff fb46 	bl	800144c <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc2:	e012      	b.n	8001dea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dc4:	f7ff fb42 	bl	800144c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d90b      	bls.n	8001dea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2205      	movs	r2, #5
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e09f      	b.n	8001f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e5      	bne.n	8001dc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7e5b      	ldrb	r3, [r3, #25]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e9b      	ldrb	r3, [r3, #26]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0220 	bic.w	r2, r2, #32
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7edb      	ldrb	r3, [r3, #27]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0210 	bic.w	r2, r2, #16
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0210 	orr.w	r2, r2, #16
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7f1b      	ldrb	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7f5b      	ldrb	r3, [r3, #29]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0204 	orr.w	r2, r2, #4
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0204 	bic.w	r2, r2, #4
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	ea42 0103 	orr.w	r1, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4906      	ldr	r1, [pc, #24]	; (8001fcc <__NVIC_EnableIRQ+0x34>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff90 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff2d 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff42 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff90 	bl	8002024 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5f 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff35 	bl	8001f98 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e043      	b.n	80021ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_DMA_Init+0xa8>)
 800216e:	4413      	add	r3, r2
 8002170:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_DMA_Init+0xac>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	009a      	lsls	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_DMA_Init+0xb0>)
 8002182:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800219a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800219e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	bffdfff8 	.word	0xbffdfff8
 80021fc:	cccccccd 	.word	0xcccccccd
 8002200:	40020000 	.word	0x40020000

08002204 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Start_IT+0x20>
 8002220:	2302      	movs	r3, #2
 8002222:	e04a      	b.n	80022ba <HAL_DMA_Start_IT+0xb6>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002232:	2b01      	cmp	r3, #1
 8002234:	d13a      	bne.n	80022ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2202      	movs	r2, #2
 800223a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f938 	bl	80024d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 020e 	orr.w	r2, r2, #14
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e00f      	b.n	800229a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0204 	bic.w	r2, r2, #4
 8002288:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 020a 	orr.w	r2, r2, #10
 8002298:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e005      	b.n	80022b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2204      	movs	r2, #4
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d04f      	beq.n	800238c <HAL_DMA_IRQHandler+0xc8>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d04a      	beq.n	800238c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0204 	bic.w	r2, r2, #4
 8002312:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_DMA_IRQHandler+0x1f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d029      	beq.n	8002372 <HAL_DMA_IRQHandler+0xae>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_DMA_IRQHandler+0xaa>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_DMA_IRQHandler+0x1f8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_IRQHandler+0xa4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a62      	ldr	r2, [pc, #392]	; (80024c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d012      	beq.n	8002362 <HAL_DMA_IRQHandler+0x9e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_DMA_IRQHandler+0x200>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00a      	beq.n	800235c <HAL_DMA_IRQHandler+0x98>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5f      	ldr	r2, [pc, #380]	; (80024c8 <HAL_DMA_IRQHandler+0x204>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_DMA_IRQHandler+0x92>
 8002350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002354:	e00e      	b.n	8002374 <HAL_DMA_IRQHandler+0xb0>
 8002356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800235a:	e00b      	b.n	8002374 <HAL_DMA_IRQHandler+0xb0>
 800235c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002360:	e008      	b.n	8002374 <HAL_DMA_IRQHandler+0xb0>
 8002362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002366:	e005      	b.n	8002374 <HAL_DMA_IRQHandler+0xb0>
 8002368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236c:	e002      	b.n	8002374 <HAL_DMA_IRQHandler+0xb0>
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	e000      	b.n	8002374 <HAL_DMA_IRQHandler+0xb0>
 8002372:	2304      	movs	r3, #4
 8002374:	4a55      	ldr	r2, [pc, #340]	; (80024cc <HAL_DMA_IRQHandler+0x208>)
 8002376:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8094 	beq.w	80024aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800238a:	e08e      	b.n	80024aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2202      	movs	r2, #2
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d056      	beq.n	800244a <HAL_DMA_IRQHandler+0x186>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d051      	beq.n	800244a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020a 	bic.w	r2, r2, #10
 80023c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_DMA_IRQHandler+0x1f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d029      	beq.n	800242a <HAL_DMA_IRQHandler+0x166>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a37      	ldr	r2, [pc, #220]	; (80024b8 <HAL_DMA_IRQHandler+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_IRQHandler+0x162>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a35      	ldr	r2, [pc, #212]	; (80024bc <HAL_DMA_IRQHandler+0x1f8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_IRQHandler+0x15c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_DMA_IRQHandler+0x1fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d012      	beq.n	800241a <HAL_DMA_IRQHandler+0x156>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_DMA_IRQHandler+0x200>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00a      	beq.n	8002414 <HAL_DMA_IRQHandler+0x150>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <HAL_DMA_IRQHandler+0x204>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d102      	bne.n	800240e <HAL_DMA_IRQHandler+0x14a>
 8002408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800240c:	e00e      	b.n	800242c <HAL_DMA_IRQHandler+0x168>
 800240e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002412:	e00b      	b.n	800242c <HAL_DMA_IRQHandler+0x168>
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	e008      	b.n	800242c <HAL_DMA_IRQHandler+0x168>
 800241a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241e:	e005      	b.n	800242c <HAL_DMA_IRQHandler+0x168>
 8002420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002424:	e002      	b.n	800242c <HAL_DMA_IRQHandler+0x168>
 8002426:	2320      	movs	r3, #32
 8002428:	e000      	b.n	800242c <HAL_DMA_IRQHandler+0x168>
 800242a:	2302      	movs	r3, #2
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_DMA_IRQHandler+0x208>)
 800242e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d034      	beq.n	80024aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002448:	e02f      	b.n	80024aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d028      	beq.n	80024ac <HAL_DMA_IRQHandler+0x1e8>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020e 	bic.w	r2, r2, #14
 8002472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
    }
  }
  return;
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
}
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40020008 	.word	0x40020008
 80024b8:	4002001c 	.word	0x4002001c
 80024bc:	40020030 	.word	0x40020030
 80024c0:	40020044 	.word	0x40020044
 80024c4:	40020058 	.word	0x40020058
 80024c8:	4002006c 	.word	0x4002006c
 80024cc:	40020000 	.word	0x40020000

080024d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d108      	bne.n	8002510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800250e:	e007      	b.n	8002520 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
	...

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b08b      	sub	sp, #44	; 0x2c
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e169      	b.n	8002814 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002540:	2201      	movs	r2, #1
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 8158 	bne.w	800280e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a9a      	ldr	r2, [pc, #616]	; (80027cc <HAL_GPIO_Init+0x2a0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d05e      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002568:	4a98      	ldr	r2, [pc, #608]	; (80027cc <HAL_GPIO_Init+0x2a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d875      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800256e:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d058      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002574:	4a96      	ldr	r2, [pc, #600]	; (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d86f      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800257a:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <HAL_GPIO_Init+0x2a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d052      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002580:	4a94      	ldr	r2, [pc, #592]	; (80027d4 <HAL_GPIO_Init+0x2a8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d869      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002586:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_GPIO_Init+0x2ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04c      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 800258c:	4a92      	ldr	r2, [pc, #584]	; (80027d8 <HAL_GPIO_Init+0x2ac>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d863      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002592:	4a92      	ldr	r2, [pc, #584]	; (80027dc <HAL_GPIO_Init+0x2b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d046      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002598:	4a90      	ldr	r2, [pc, #576]	; (80027dc <HAL_GPIO_Init+0x2b0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d85d      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d82a      	bhi.n	80025f8 <HAL_GPIO_Init+0xcc>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d859      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <HAL_GPIO_Init+0x80>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002613 	.word	0x08002613
 80025b8:	08002655 	.word	0x08002655
 80025bc:	0800265b 	.word	0x0800265b
 80025c0:	0800265b 	.word	0x0800265b
 80025c4:	0800265b 	.word	0x0800265b
 80025c8:	0800265b 	.word	0x0800265b
 80025cc:	0800265b 	.word	0x0800265b
 80025d0:	0800265b 	.word	0x0800265b
 80025d4:	0800265b 	.word	0x0800265b
 80025d8:	0800265b 	.word	0x0800265b
 80025dc:	0800265b 	.word	0x0800265b
 80025e0:	0800265b 	.word	0x0800265b
 80025e4:	0800265b 	.word	0x0800265b
 80025e8:	0800265b 	.word	0x0800265b
 80025ec:	0800265b 	.word	0x0800265b
 80025f0:	08002609 	.word	0x08002609
 80025f4:	0800261d 	.word	0x0800261d
 80025f8:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <HAL_GPIO_Init+0x2b4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fe:	e02c      	b.n	800265a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e029      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e024      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	3308      	adds	r3, #8
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e01f      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	330c      	adds	r3, #12
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e01a      	b.n	800265c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800262e:	2304      	movs	r3, #4
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e013      	b.n	800265c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	611a      	str	r2, [r3, #16]
          break;
 8002646:	e009      	b.n	800265c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002648:	2308      	movs	r3, #8
 800264a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	615a      	str	r2, [r3, #20]
          break;
 8002652:	e003      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x130>
          break;
 800265a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d801      	bhi.n	8002666 <HAL_GPIO_Init+0x13a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e001      	b.n	800266a <HAL_GPIO_Init+0x13e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d802      	bhi.n	8002678 <HAL_GPIO_Init+0x14c>
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x152>
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3b08      	subs	r3, #8
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	210f      	movs	r1, #15
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80b1 	beq.w	800280e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c4:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_GPIO_Init+0x2bc>)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a40      	ldr	r2, [pc, #256]	; (80027ec <HAL_GPIO_Init+0x2c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x1ec>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <HAL_GPIO_Init+0x2c4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1e8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <HAL_GPIO_Init+0x2c8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1e4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3d      	ldr	r2, [pc, #244]	; (80027f8 <HAL_GPIO_Init+0x2cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1e0>
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 800270c:	2304      	movs	r3, #4
 800270e:	e004      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002710:	2302      	movs	r3, #2
 8002712:	e002      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002718:	2300      	movs	r3, #0
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	f002 0203 	and.w	r2, r2, #3
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	4093      	lsls	r3, r2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800272a:	492f      	ldr	r1, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x2bc>)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	492c      	ldr	r1, [pc, #176]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4928      	ldr	r1, [pc, #160]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800275c:	4013      	ands	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4922      	ldr	r1, [pc, #136]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	43db      	mvns	r3, r3
 8002782:	491e      	ldr	r1, [pc, #120]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002784:	4013      	ands	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	4918      	ldr	r1, [pc, #96]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4914      	ldr	r1, [pc, #80]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d021      	beq.n	8002800 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e021      	b.n	800280e <HAL_GPIO_Init+0x2e2>
 80027ca:	bf00      	nop
 80027cc:	10320000 	.word	0x10320000
 80027d0:	10310000 	.word	0x10310000
 80027d4:	10220000 	.word	0x10220000
 80027d8:	10210000 	.word	0x10210000
 80027dc:	10120000 	.word	0x10120000
 80027e0:	10110000 	.word	0x10110000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_GPIO_Init+0x304>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	4909      	ldr	r1, [pc, #36]	; (8002830 <HAL_GPIO_Init+0x304>)
 800280a:	4013      	ands	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f ae8e 	bne.w	8002540 <HAL_GPIO_Init+0x14>
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e272      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8087 	beq.w	8002962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00c      	beq.n	800287a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d112      	bne.n	8002892 <HAL_RCC_OscConfig+0x5e>
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d10b      	bne.n	8002892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287a:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d06c      	beq.n	8002960 <HAL_RCC_OscConfig+0x12c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d168      	bne.n	8002960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e24c      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x76>
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7f      	ldr	r2, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	e02e      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x98>
 80028b2:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0xbc>
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a71      	ldr	r2, [pc, #452]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028f0:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fd9c 	bl	800144c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fd98 	bl	800144c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e200      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0xe4>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fd88 	bl	800144c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fd84 	bl	800144c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1ec      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x10c>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d063      	beq.n	8002a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297a:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x18c>
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x176>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e1c0      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4939      	ldr	r1, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e03a      	b.n	8002a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fd3d 	bl	800144c <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fd39 	bl	800144c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1a1      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4927      	ldr	r1, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	e015      	b.n	8002a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fd1c 	bl	800144c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe fd18 	bl	800144c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e180      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03a      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fcfc 	bl	800144c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fcf8 	bl	800144c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e160      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 fac4 	bl	8003004 <RCC_Delay>
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fce2 	bl	800144c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8a:	e00f      	b.n	8002aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fcde 	bl	800144c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d908      	bls.n	8002aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e146      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	42420000 	.word	0x42420000
 8002aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e9      	bne.n	8002a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a6 	beq.w	8002c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a87      	ldr	r2, [pc, #540]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]
 8002ae2:	4b85      	ldr	r3, [pc, #532]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7e      	ldr	r2, [pc, #504]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fc9f 	bl	800144c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe fc9b 	bl	800144c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e103      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x312>
 8002b38:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a6e      	ldr	r2, [pc, #440]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x334>
 8002b4e:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a66      	ldr	r2, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x356>
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a60      	ldr	r2, [pc, #384]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	4b5e      	ldr	r3, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4a5d      	ldr	r2, [pc, #372]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6213      	str	r3, [r2, #32]
 8002b88:	e00b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d015      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fc4f 	bl	800144c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fc4b 	bl	800144c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0b1      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ee      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x37e>
 8002bd4:	e014      	b.n	8002c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fc39 	bl	800144c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fc35 	bl	800144c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e09b      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ee      	bne.n	8002bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a3b      	ldr	r2, [pc, #236]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8087 	beq.w	8002d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1c:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d061      	beq.n	8002cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d146      	bne.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe fc09 	bl	800144c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fc05 	bl	800144c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e06d      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4921      	ldr	r1, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a19      	ldr	r1, [r3, #32]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	491b      	ldr	r1, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe fbd9 	bl	800144c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fbd5 	bl	800144c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e03d      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x46a>
 8002cbc:	e035      	b.n	8002d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fbc2 	bl	800144c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fbbe 	bl	800144c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e026      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x498>
 8002cea:	e01e      	b.n	8002d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e019      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_OscConfig+0x500>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d0      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4965      	ldr	r1, [pc, #404]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d040      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e073      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e06b      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4936      	ldr	r1, [pc, #216]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fb10 	bl	800144c <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe fb0c 	bl	800144c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e053      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d210      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fa6e 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004820 	.word	0x08004820
 8002f04:	20000008 	.word	0x20000008
 8002f08:	2000000c 	.word	0x2000000c

08002f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b490      	push	{r4, r7}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f14:	1d3c      	adds	r4, r7, #4
 8002f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f1c:	f240 2301 	movw	r3, #513	; 0x201
 8002f20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f36:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x40>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x46>
 8002f4a:	e02b      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f4e:	623b      	str	r3, [r7, #32]
      break;
 8002f50:	e02b      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3328      	adds	r3, #40	; 0x28
 8002f5c:	443b      	add	r3, r7
 8002f5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f62:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0c5b      	lsrs	r3, r3, #17
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	3328      	adds	r3, #40	; 0x28
 8002f7a:	443b      	add	r3, r7
 8002f7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f86:	fb03 f202 	mul.w	r2, r3, r2
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e004      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	623b      	str	r3, [r7, #32]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fa6:	623b      	str	r3, [r7, #32]
      break;
 8002fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002faa:	6a3b      	ldr	r3, [r7, #32]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc90      	pop	{r4, r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	08004800 	.word	0x08004800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	007a1200 	.word	0x007a1200
 8002fc4:	003d0900 	.word	0x003d0900

08002fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000008 	.word	0x20000008

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe0:	f7ff fff2 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0adb      	lsrs	r3, r3, #11
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	08004830 	.word	0x08004830

08003004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <RCC_Delay+0x34>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <RCC_Delay+0x38>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0a5b      	lsrs	r3, r3, #9
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003020:	bf00      	nop
  }
  while (Delay --);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	60fa      	str	r2, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <RCC_Delay+0x1c>
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000008 	.word	0x20000008
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d07d      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800305c:	2300      	movs	r3, #0
 800305e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003060:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10d      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	61d3      	str	r3, [r2, #28]
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d118      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a0:	f7fe f9d4 	bl	800144c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	e008      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe f9d0 	bl	800144c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e06d      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02e      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d027      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f4:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d014      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe f99f 	bl	800144c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe f99b 	bl	800144c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e036      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ee      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4917      	ldr	r1, [pc, #92]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	4313      	orrs	r3, r2
 8003144:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003156:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	490b      	ldr	r1, [pc, #44]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4904      	ldr	r1, [pc, #16]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42420440 	.word	0x42420440

080031ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b08d      	sub	sp, #52	; 0x34
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80031b6:	f107 040c 	add.w	r4, r7, #12
 80031ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031c0:	f240 2301 	movw	r3, #513	; 0x201
 80031c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	2300      	movs	r3, #0
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	2300      	movs	r3, #0
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	f200 808e 	bhi.w	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d049      	beq.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d079      	beq.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80031f4:	e086      	b.n	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80031f6:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80031fc:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d07f      	beq.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	0c9b      	lsrs	r3, r3, #18
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	3330      	adds	r3, #48	; 0x30
 8003212:	443b      	add	r3, r7
 8003214:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003218:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c5b      	lsrs	r3, r3, #17
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	3330      	adds	r3, #48	; 0x30
 8003230:	443b      	add	r3, r7
 8003232:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	fbb2 f2f3 	udiv	r2, r2, r3
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003252:	e004      	b.n	800325e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326a:	d102      	bne.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003270:	e04a      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003280:	e042      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d108      	bne.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a4:	e01f      	b.n	80032e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d109      	bne.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80032be:	f649 4340 	movw	r3, #40000	; 0x9c40
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c4:	e00f      	b.n	80032e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d0:	d11c      	bne.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80032de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032e4:	e012      	b.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80032e6:	e011      	b.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032e8:	f7ff fe78 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	0b9b      	lsrs	r3, r3, #14
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	3301      	adds	r3, #1
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003302:	e004      	b.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003304:	bf00      	nop
 8003306:	e002      	b.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800330c:	bf00      	nop
    }
  }
  return (frequency);
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003310:	4618      	mov	r0, r3
 8003312:	3734      	adds	r7, #52	; 0x34
 8003314:	46bd      	mov	sp, r7
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	08004810 	.word	0x08004810
 800331c:	40021000 	.word	0x40021000
 8003320:	007a1200 	.word	0x007a1200
 8003324:	003d0900 	.word	0x003d0900
 8003328:	aaaaaaab 	.word	0xaaaaaaab

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd ff5a 	bl	800120c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 fbf2 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e041      	b.n	8003460 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd ff27 	bl	8001244 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 fba3 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_OC_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_OC_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_OC_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_OC_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_OC_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_OC_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e05e      	b.n	8003598 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_OC_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_OC_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_OC_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_OC_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_OC_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_OC_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fd9a 	bl	8004054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_TIM_OC_Start+0x138>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d107      	bne.n	800353a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIM_OC_Start+0x138>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_TIM_OC_Start+0xfa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d009      	beq.n	8003562 <HAL_TIM_OC_Start+0xfa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_TIM_OC_Start+0x13c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIM_OC_Start+0xfa>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <HAL_TIM_OC_Start+0x140>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d111      	bne.n	8003586 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d010      	beq.n	8003596 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	e007      	b.n	8003596 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e041      	b.n	8003642 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f839 	bl	800364a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 fab2 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_TIM_PWM_Start+0x24>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e022      	b.n	80036c6 <HAL_TIM_PWM_Start+0x6a>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d109      	bne.n	800369a <HAL_TIM_PWM_Start+0x3e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e015      	b.n	80036c6 <HAL_TIM_PWM_Start+0x6a>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d109      	bne.n	80036b4 <HAL_TIM_PWM_Start+0x58>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e008      	b.n	80036c6 <HAL_TIM_PWM_Start+0x6a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e05e      	b.n	800378c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0x82>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036dc:	e013      	b.n	8003706 <HAL_TIM_PWM_Start+0xaa>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0x92>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_PWM_Start+0xaa>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fc:	e003      	b.n	8003706 <HAL_TIM_PWM_Start+0xaa>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fca0 	bl	8004054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_PWM_Start+0x138>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d107      	bne.n	800372e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_TIM_PWM_Start+0x138>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_TIM_PWM_Start+0xfa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d009      	beq.n	8003756 <HAL_TIM_PWM_Start+0xfa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a14      	ldr	r2, [pc, #80]	; (8003798 <HAL_TIM_PWM_Start+0x13c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIM_PWM_Start+0xfa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <HAL_TIM_PWM_Start+0x140>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b06      	cmp	r3, #6
 8003766:	d010      	beq.n	800378a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003778:	e007      	b.n	800378a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_OC_ConfigChannel+0x1a>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e046      	b.n	8003848 <HAL_TIM_OC_ConfigChannel+0xa8>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d839      	bhi.n	800383c <HAL_TIM_OC_ConfigChannel+0x9c>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	08003805 	.word	0x08003805
 80037d4:	0800383d 	.word	0x0800383d
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	0800383d 	.word	0x0800383d
 80037e0:	08003813 	.word	0x08003813
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	08003821 	.word	0x08003821
 80037f4:	0800383d 	.word	0x0800383d
 80037f8:	0800383d 	.word	0x0800383d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800382f 	.word	0x0800382f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fa04 	bl	8003c18 <TIM_OC1_SetConfig>
      break;
 8003810:	e015      	b.n	800383e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fa63 	bl	8003ce4 <TIM_OC2_SetConfig>
      break;
 800381e:	e00e      	b.n	800383e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fac6 	bl	8003db8 <TIM_OC3_SetConfig>
      break;
 800382c:	e007      	b.n	800383e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fb29 	bl	8003e8c <TIM_OC4_SetConfig>
      break;
 800383a:	e000      	b.n	800383e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800383c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003866:	2302      	movs	r3, #2
 8003868:	e0ac      	b.n	80039c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	f200 809f 	bhi.w	80039b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080039b9 	.word	0x080039b9
 8003888:	080039b9 	.word	0x080039b9
 800388c:	080039b9 	.word	0x080039b9
 8003890:	080038f5 	.word	0x080038f5
 8003894:	080039b9 	.word	0x080039b9
 8003898:	080039b9 	.word	0x080039b9
 800389c:	080039b9 	.word	0x080039b9
 80038a0:	08003937 	.word	0x08003937
 80038a4:	080039b9 	.word	0x080039b9
 80038a8:	080039b9 	.word	0x080039b9
 80038ac:	080039b9 	.word	0x080039b9
 80038b0:	08003977 	.word	0x08003977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f9ac 	bl	8003c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0208 	orr.w	r2, r2, #8
 80038ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	619a      	str	r2, [r3, #24]
      break;
 80038f2:	e062      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f9f2 	bl	8003ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6999      	ldr	r1, [r3, #24]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]
      break;
 8003934:	e041      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fa3b 	bl	8003db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0208 	orr.w	r2, r2, #8
 8003950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0204 	bic.w	r2, r2, #4
 8003960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	61da      	str	r2, [r3, #28]
      break;
 8003974:	e021      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fa85 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69d9      	ldr	r1, [r3, #28]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	61da      	str	r2, [r3, #28]
      break;
 80039b6:	e000      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80039b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0b3      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x180>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d03e      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0xd0>
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a22:	f200 8087 	bhi.w	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	f000 8085 	beq.w	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d87f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a34:	2b70      	cmp	r3, #112	; 0x70
 8003a36:	d01a      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xa2>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d87b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a3c:	2b60      	cmp	r3, #96	; 0x60
 8003a3e:	d050      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x116>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d877      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a44:	2b50      	cmp	r3, #80	; 0x50
 8003a46:	d03c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0xf6>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d873      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d058      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x136>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d86f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a54:	2b30      	cmp	r3, #48	; 0x30
 8003a56:	d064      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x156>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d86b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d060      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x156>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d867      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x156>
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d05a      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a6c:	e062      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f000 faca 	bl	8004016 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	609a      	str	r2, [r3, #8]
      break;
 8003a9a:	e04e      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6899      	ldr	r1, [r3, #8]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f000 fab3 	bl	8004016 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003abe:	609a      	str	r2, [r3, #8]
      break;
 8003ac0:	e03b      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fa2a 	bl	8003f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2150      	movs	r1, #80	; 0x50
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fa81 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e02b      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f000 fa48 	bl	8003f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2160      	movs	r1, #96	; 0x60
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa71 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003b00:	e01b      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fa0a 	bl	8003f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa61 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003b20:	e00b      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f000 fa58 	bl	8003fe2 <TIM_ITRx_SetConfig>
        break;
 8003b32:	e002      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <TIM_Base_SetConfig+0xb8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x30>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x30>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <TIM_Base_SetConfig+0xbc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x30>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <TIM_Base_SetConfig+0xb8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00b      	beq.n	8003bb6 <TIM_Base_SetConfig+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d007      	beq.n	8003bb6 <TIM_Base_SetConfig+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <TIM_Base_SetConfig+0xbc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_Base_SetConfig+0x62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d108      	bne.n	8003bc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <TIM_Base_SetConfig+0xb8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800

08003c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 0302 	bic.w	r3, r3, #2
 8003c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <TIM_OC1_SetConfig+0xc8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10c      	bne.n	8003c8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0308 	bic.w	r3, r3, #8
 8003c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <TIM_OC1_SetConfig+0xc8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d111      	bne.n	8003cba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00

08003ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f023 0210 	bic.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0320 	bic.w	r3, r3, #32
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <TIM_OC2_SetConfig+0xd0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10d      	bne.n	8003d60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <TIM_OC2_SetConfig+0xd0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d113      	bne.n	8003d90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00

08003db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <TIM_OC3_SetConfig+0xd0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <TIM_OC3_SetConfig+0xd0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0f      	ldr	r2, [pc, #60]	; (8003f24 <TIM_OC4_SetConfig+0x98>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d109      	bne.n	8003f00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0201 	bic.w	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f023 030a 	bic.w	r3, r3, #10
 8003f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f023 0210 	bic.w	r2, r3, #16
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	031b      	lsls	r3, r3, #12
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f043 0307 	orr.w	r3, r3, #7
 8004004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004016:	b480      	push	{r7}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	021a      	lsls	r2, r3, #8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	431a      	orrs	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	609a      	str	r2, [r3, #8]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	2201      	movs	r2, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1a      	ldr	r2, [r3, #32]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e046      	b.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d009      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a12      	ldr	r2, [pc, #72]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a10      	ldr	r2, [pc, #64]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10c      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4313      	orrs	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800

08004158 <PID_Init>:
﻿#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004188:	f7fc fc2e 	bl	80009e8 <__aeabi_dcmpgt>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d006      	beq.n	80041a0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 800419e:	e011      	b.n	80041c4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80041ac:	f7fc fbfe 	bl	80009ac <__aeabi_dcmplt>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d100      	bne.n	80041b8 <PID_Init+0x60>
}
 80041b6:	e005      	b.n	80041c4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	0000      	movs	r0, r0
	...

080041d0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af06      	add	r7, sp, #24
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80041f6:	a318      	add	r3, pc, #96	; (adr r3, 8004258 <PID+0x88>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f931 	bl	8004470 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2264      	movs	r2, #100	; 0x64
 8004212:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8004214:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004218:	4619      	mov	r1, r3
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa3c 	bl	8004698 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8004220:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004224:	9304      	str	r3, [sp, #16]
 8004226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800422a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800422e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004232:	e9cd 2300 	strd	r2, r3, [sp]
 8004236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f984 	bl	8004548 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8004240:	f7fd f904 	bl	800144c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	1ad2      	subs	r2, r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
	
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	00000000 	.word	0x00000000
 800425c:	406fe000 	.word	0x406fe000

08004260 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004260:	b5b0      	push	{r4, r5, r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <PID_Compute+0x14>
	{
		return _FALSE;
 8004270:	2300      	movs	r3, #0
 8004272:	e0db      	b.n	800442c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8004274:	f7fd f8ea 	bl	800144c <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	429a      	cmp	r2, r3
 800428c:	f0c0 80cd 	bcc.w	800442a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a8:	f7fb ff56 	bl	8000158 <__aeabi_dsub>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80042ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042be:	f7fb ff4b 	bl	8000158 <__aeabi_dsub>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80042d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042da:	f7fc f8f5 	bl	80004c8 <__aeabi_dmul>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4620      	mov	r0, r4
 80042e4:	4629      	mov	r1, r5
 80042e6:	f7fb ff39 	bl	800015c <__adddf3>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d114      	bne.n	8004326 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800430c:	f7fc f8dc 	bl	80004c8 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4620      	mov	r0, r4
 8004316:	4629      	mov	r1, r5
 8004318:	f7fb ff1e 	bl	8000158 <__aeabi_dsub>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004332:	f7fc fb59 	bl	80009e8 <__aeabi_dcmpgt>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d006      	beq.n	800434a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004348:	e010      	b.n	800436c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004356:	f7fc fb29 	bl	80009ac <__aeabi_dcmplt>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800437a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800437e:	f7fc f8a3 	bl	80004c8 <__aeabi_dmul>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800438a:	e005      	b.n	8004398 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80043a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043a8:	f7fc f88e 	bl	80004c8 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fb fed0 	bl	8000158 <__aeabi_dsub>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043c0:	f7fb fecc 	bl	800015c <__adddf3>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80043d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043d6:	f7fc fb07 	bl	80009e8 <__aeabi_dcmpgt>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80043e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80043ea:	e00e      	b.n	800440a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80043f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f6:	f7fc fad9 	bl	80009ac <__aeabi_dcmplt>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004406:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800440e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004412:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 800442a:	2300      	movs	r3, #0
	}
	
}
 800442c:	4618      	mov	r0, r3
 800442e:	3730      	adds	r7, #48	; 0x30
 8004430:	46bd      	mov	sp, r7
 8004432:	bdb0      	pop	{r4, r5, r7, pc}

08004434 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	2b01      	cmp	r3, #1
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d006      	beq.n	8004462 <PID_SetMode+0x2e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe7b 	bl	8004158 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	705a      	strb	r2, [r3, #1]
	
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800447c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004484:	f7fc faa6 	bl	80009d4 <__aeabi_dcmpge>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d158      	bne.n	8004540 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004494:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8004498:	68f9      	ldr	r1, [r7, #12]
 800449a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d04b      	beq.n	8004542 <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80044b8:	f7fc fa96 	bl	80009e8 <__aeabi_dcmpgt>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80044cc:	e9c1 2300 	strd	r2, r3, [r1]
 80044d0:	e012      	b.n	80044f8 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80044e0:	f7fc fa64 	bl	80009ac <__aeabi_dcmplt>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80044f4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004504:	f7fc fa70 	bl	80009e8 <__aeabi_dcmpgt>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800451a:	e012      	b.n	8004542 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004528:	f7fc fa40 	bl	80009ac <__aeabi_dcmplt>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800453e:	e000      	b.n	8004542 <PID_SetOutputLimits+0xd2>
		return;
 8004540:	bf00      	nop
		}
		else { }
		
	}
	
}
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004560:	f7fc fa24 	bl	80009ac <__aeabi_dcmplt>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 808b 	bne.w	8004682 <PID_SetTunings2+0x13a>
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004578:	f7fc fa18 	bl	80009ac <__aeabi_dcmplt>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d17f      	bne.n	8004682 <PID_SetTunings2+0x13a>
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800458e:	f7fc fa0d 	bl	80009ac <__aeabi_dcmplt>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d174      	bne.n	8004682 <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800459e:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80045a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000000;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb fefc 	bl	80003d4 <__aeabi_ui2d>
 80045dc:	a32c      	add	r3, pc, #176	; (adr r3, 8004690 <PID_SetTunings2+0x148>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fc f89b 	bl	800071c <__aeabi_ddiv>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80045f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004600:	f7fb ff62 	bl	80004c8 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800460e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004612:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004616:	f7fc f881 	bl	800071c <__aeabi_ddiv>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	78db      	ldrb	r3, [r3, #3]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d12b      	bne.n	8004684 <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f04f 0100 	mov.w	r1, #0
 800463a:	f7fb fd8d 	bl	8000158 <__aeabi_dsub>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800464e:	f04f 0000 	mov.w	r0, #0
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	f7fb fd7f 	bl	8000158 <__aeabi_dsub>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800466a:	f04f 0000 	mov.w	r0, #0
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f7fb fd71 	bl	8000158 <__aeabi_dsub>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004680:	e000      	b.n	8004684 <PID_SetTunings2+0x13c>
		return;
 8004682:	bf00      	nop
		
	}
	
}
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	f3af 8000 	nop.w
 8004690:	00000000 	.word	0x00000000
 8004694:	412e8480 	.word	0x412e8480

08004698 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02e      	beq.n	800470a <PID_SetControllerDirection+0x72>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	78db      	ldrb	r3, [r3, #3]
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d029      	beq.n	800470a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f7fb fd48 	bl	8000158 <__aeabi_dsub>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	f7fb fd3a 	bl	8000158 <__aeabi_dsub>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	f7fb fd2c 	bl	8000158 <__aeabi_dsub>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	70da      	strb	r2, [r3, #3]
	
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8004718:	b5b0      	push	{r4, r5, r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	dd2e      	ble.n	8004786 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f7fb fe63 	bl	80003f4 <__aeabi_i2d>
 800472e:	4604      	mov	r4, r0
 8004730:	460d      	mov	r5, r1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb fe4c 	bl	80003d4 <__aeabi_ui2d>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb ffea 	bl	800071c <__aeabi_ddiv>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800475a:	f7fb feb5 	bl	80004c8 <__aeabi_dmul>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800476e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004772:	f7fb ffd3 	bl	800071c <__aeabi_ddiv>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	2600      	movs	r6, #0
 8004794:	4d0c      	ldr	r5, [pc, #48]	; (80047c8 <__libc_init_array+0x38>)
 8004796:	4c0d      	ldr	r4, [pc, #52]	; (80047cc <__libc_init_array+0x3c>)
 8004798:	1b64      	subs	r4, r4, r5
 800479a:	10a4      	asrs	r4, r4, #2
 800479c:	42a6      	cmp	r6, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	f000 f822 	bl	80047e8 <_init>
 80047a4:	2600      	movs	r6, #0
 80047a6:	4d0a      	ldr	r5, [pc, #40]	; (80047d0 <__libc_init_array+0x40>)
 80047a8:	4c0a      	ldr	r4, [pc, #40]	; (80047d4 <__libc_init_array+0x44>)
 80047aa:	1b64      	subs	r4, r4, r5
 80047ac:	10a4      	asrs	r4, r4, #2
 80047ae:	42a6      	cmp	r6, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b8:	4798      	blx	r3
 80047ba:	3601      	adds	r6, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c2:	4798      	blx	r3
 80047c4:	3601      	adds	r6, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	08004838 	.word	0x08004838
 80047cc:	08004838 	.word	0x08004838
 80047d0:	08004838 	.word	0x08004838
 80047d4:	0800483c 	.word	0x0800483c

080047d8 <memset>:
 80047d8:	4603      	mov	r3, r0
 80047da:	4402      	add	r2, r0
 80047dc:	4293      	cmp	r3, r2
 80047de:	d100      	bne.n	80047e2 <memset+0xa>
 80047e0:	4770      	bx	lr
 80047e2:	f803 1b01 	strb.w	r1, [r3], #1
 80047e6:	e7f9      	b.n	80047dc <memset+0x4>

080047e8 <_init>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr

080047f4 <_fini>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr
