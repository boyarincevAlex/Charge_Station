
Charge_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e20  08004e20  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004e20  08004e20  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e20  08004e20  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004e28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000028  08004e4c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004e4c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e588  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b2  00000000  00000000  0002e5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00030b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00031b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b5d  00000000  00000000  00032a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ddd  00000000  00000000  0004b56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009112e  00000000  00000000  0005c34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  000ed4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08004dd0 	.word	0x08004dd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08004dd0 	.word	0x08004dd0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_f2uiz>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	d20e      	bcs.n	8000abe <__aeabi_f2uiz+0x22>
 8000aa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000aa4:	d30b      	bcc.n	8000abe <__aeabi_f2uiz+0x22>
 8000aa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aaa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aae:	d409      	bmi.n	8000ac4 <__aeabi_f2uiz+0x28>
 8000ab0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab8:	fa23 f002 	lsr.w	r0, r3, r2
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac8:	d101      	bne.n	8000ace <__aeabi_f2uiz+0x32>
 8000aca:	0242      	lsls	r2, r0, #9
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_f2uiz+0x38>
 8000ace:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <averageAll>:
#include "ConfigADC.h"

uint16_t averageAll(const uint16_t data[])
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  int sumOfElements = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  size_t size = sizeof(data)/sizeof(data[0]);
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
  for(size_t i = 0; i < size; ++i)
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	e00b      	b.n	8000b0a <averageAll+0x2e>
  {
    sumOfElements += data[i];
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	4413      	add	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < size; ++i)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	3301      	adds	r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3ef      	bcc.n	8000af2 <averageAll+0x16>
  }

  uint16_t result = sumOfElements / size;
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	817b      	strh	r3, [r7, #10]
  return result;
 8000b1c:	897b      	ldrh	r3, [r7, #10]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <adcToVoltage>:

double adcToVoltage(const uint16_t averageData)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	return 3.3*averageData/4096;
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fc5d 	bl	80003f4 <__aeabi_i2d>
 8000b3a:	a30b      	add	r3, pc, #44	; (adr r3, 8000b68 <adcToVoltage+0x40>)
 8000b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b40:	f7ff fcc2 	bl	80004c8 <__aeabi_dmul>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	4610      	mov	r0, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <adcToVoltage+0x48>)
 8000b52:	f7ff fde3 	bl	800071c <__aeabi_ddiv>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
}
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	f3af 8000 	nop.w
 8000b68:	66666666 	.word	0x66666666
 8000b6c:	400a6666 	.word	0x400a6666
 8000b70:	40b00000 	.word	0x40b00000

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7a:	f000 fd63 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7e:	f000 f873 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 facd 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b86:	f000 faad 	bl	80010e4 <MX_DMA_Init>
  MX_CAN_Init();
 8000b8a:	f000 f927 	bl	8000ddc <MX_CAN_Init>
  MX_TIM2_Init();
 8000b8e:	f000 f959 	bl	8000e44 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b92:	f000 f8c5 	bl	8000d20 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000b96:	f000 fa25 	bl	8000fe4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b9a:	f000 f9d5 	bl	8000f48 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b9e:	f000 fa77 	bl	8001090 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Update_Duty_Cycle(50);
 8000ba2:	2032      	movs	r0, #50	; 0x32
 8000ba4:	f000 fade 	bl	8001164 <Update_Duty_Cycle>

  PID(&VoltagePID, &inputVoltageADC, &outputVoltageADC, &setpointVoltageADC, 2, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9307      	str	r3, [sp, #28]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9306      	str	r3, [sp, #24]
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	e9cd 2300 	strd	r2, r3, [sp]
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <main+0xc8>)
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <main+0xcc>)
 8000bd8:	491a      	ldr	r1, [pc, #104]	; (8000c44 <main+0xd0>)
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <main+0xd4>)
 8000bdc:	f003 fde4 	bl	80047a8 <PID>
  PID_SetMode(&VoltagePID, _PID_MODE_AUTOMATIC);
 8000be0:	2101      	movs	r1, #1
 8000be2:	4819      	ldr	r0, [pc, #100]	; (8000c48 <main+0xd4>)
 8000be4:	f003 ff17 	bl	8004a16 <PID_SetMode>
  PID_SetSampleTime(&VoltagePID, 100);
 8000be8:	2164      	movs	r1, #100	; 0x64
 8000bea:	4817      	ldr	r0, [pc, #92]	; (8000c48 <main+0xd4>)
 8000bec:	f004 f888 	bl	8004d00 <PID_SetSampleTime>
  PID_SetOutputLimits(&VoltagePID, LOW_VOLTAGE, HIGH_VOLTAGE);
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <main+0xd8>)
 8000bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <main+0xdc>)
 8000bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4810      	ldr	r0, [pc, #64]	; (8000c48 <main+0xd4>)
 8000c06:	f003 ff24 	bl	8004a52 <PID_SetOutputLimits>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <main+0xe0>)
 8000c0c:	f001 f994 	bl	8001f38 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data, 10);
 8000c10:	220a      	movs	r2, #10
 8000c12:	4911      	ldr	r1, [pc, #68]	; (8000c58 <main+0xe4>)
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <main+0xe0>)
 8000c16:	f000 fe4f 	bl	80018b8 <HAL_ADC_Start_DMA>
  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 8000c1a:	210c      	movs	r1, #12
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <main+0xe8>)
 8000c1e:	f002 fe2d 	bl	800387c <HAL_TIM_OC_Start>

  HAL_TIM_Base_Start(&htim3);
 8000c22:	480f      	ldr	r0, [pc, #60]	; (8000c60 <main+0xec>)
 8000c24:	f002 fd90 	bl	8003748 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	480e      	ldr	r0, [pc, #56]	; (8000c64 <main+0xf0>)
 8000c2c:	f002 ff20 	bl	8003a70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c30:	2104      	movs	r1, #4
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <main+0xf0>)
 8000c34:	f002 ff1c 	bl	8003a70 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <main+0xc4>
 8000c3a:	bf00      	nop
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	20000288 	.word	0x20000288
 8000c44:	20000280 	.word	0x20000280
 8000c48:	20000048 	.word	0x20000048
 8000c4c:	200000b8 	.word	0x200000b8
 8000c50:	20000000 	.word	0x20000000
 8000c54:	200000c0 	.word	0x200000c0
 8000c58:	20000290 	.word	0x20000290
 8000c5c:	200001ec 	.word	0x200001ec
 8000c60:	200001a4 	.word	0x200001a4
 8000c64:	2000015c 	.word	0x2000015c

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	; 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	2228      	movs	r2, #40	; 0x28
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 f8a2 	bl	8004dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 ff62 	bl	8002b88 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cca:	f000 fab7 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 f9ce 	bl	800308c <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cf6:	f000 faa1 	bl	800123c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fb58 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d12:	f000 fa93 	bl	800123c <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <MX_ADC1_Init+0xb4>)
 8000d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d5c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d70:	f000 fcca 	bl	8001708 <HAL_ADC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8000d7a:	f000 fa5f 	bl	800123c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_ADC1_Init+0xb8>)
 8000d80:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_4;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d9a:	f000 ff75 	bl	8001c88 <HAL_ADC_AnalogWDGConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000da4:	f000 fa4a 	bl	800123c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000dba:	f000 fe6d 	bl	8001a98 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000dc4:	f000 fa3a 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000c0 	.word	0x200000c0
 8000dd4:	40012400 	.word	0x40012400
 8000dd8:	00800200 	.word	0x00800200

08000ddc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_CAN_Init+0x60>)
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <MX_CAN_Init+0x64>)
 8000de4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_CAN_Init+0x60>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_CAN_Init+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_CAN_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_CAN_Init+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_CAN_Init+0x60>)
 8000e2a:	f001 f931 	bl	8002090 <HAL_CAN_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 fa02 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000134 	.word	0x20000134
 8000e40:	40006400 	.word	0x40006400

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e74:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000e7c:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e7e:	2203      	movs	r2, #3
 8000e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e84:	2220      	movs	r2, #32
 8000e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 359;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e8a:	f240 1267 	movw	r2, #359	; 0x167
 8000e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9c:	4829      	ldr	r0, [pc, #164]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000e9e:	f002 fc03 	bl	80036a8 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ea8:	f000 f9c8 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000eba:	f002 ff91 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ec4:	f000 f9ba 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec8:	481e      	ldr	r0, [pc, #120]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000eca:	f002 fd79 	bl	80039c0 <HAL_TIM_PWM_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ed4:	f000 f9b2 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4817      	ldr	r0, [pc, #92]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000ee8:	f003 fae2 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ef2:	f000 f9a3 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000f0e:	f002 fea9 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f18:	f000 f990 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2204      	movs	r2, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000f28:	f002 fe9c 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000f32:	f000 f983 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM2_Init+0x100>)
 8000f38:	f000 faaa 	bl	8001490 <HAL_TIM_MspPostInit>

}
 8000f3c:	bf00      	nop
 8000f3e:	3738      	adds	r7, #56	; 0x38
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000015c 	.word	0x2000015c

08000f48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <MX_TIM3_Init+0x98>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f6c:	2223      	movs	r2, #35	; 0x23
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000f8c:	f002 fb8c 	bl	80036a8 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f96:	f000 f951 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000fa8:	f002 ff1a 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f943 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_TIM3_Init+0x94>)
 8000fc4:	f003 fa74 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fce:	f000 f935 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001a4 	.word	0x200001a4
 8000fe0:	40000400 	.word	0x40000400

08000fe4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <MX_TIM4_Init+0xa4>)
 8001008:	4a20      	ldr	r2, [pc, #128]	; (800108c <MX_TIM4_Init+0xa8>)
 800100a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_TIM4_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM4_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM4_Init+0xa4>)
 800101a:	f240 1267 	movw	r2, #359	; 0x167
 800101e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_TIM4_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM4_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800102c:	4816      	ldr	r0, [pc, #88]	; (8001088 <MX_TIM4_Init+0xa4>)
 800102e:	f002 fbd5 	bl	80037dc <HAL_TIM_OC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001038:	f000 f900 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4619      	mov	r1, r3
 800104a:	480f      	ldr	r0, [pc, #60]	; (8001088 <MX_TIM4_Init+0xa4>)
 800104c:	f003 fa30 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001056:	f000 f8f1 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800105a:	2330      	movs	r3, #48	; 0x30
 800105c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	220c      	movs	r2, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM4_Init+0xa4>)
 8001072:	f002 fd9f 	bl	8003bb4 <HAL_TIM_OC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800107c:	f000 f8de 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001ec 	.word	0x200001ec
 800108c:	40000800 	.word	0x40000800

08001090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <MX_USART1_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_USART1_UART_Init+0x4c>)
 80010c8:	f003 fa50 	bl	800456c <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f000 f8b3 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000234 	.word	0x20000234
 80010e0:	40013800 	.word	0x40013800

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x38>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x38>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2102      	movs	r1, #2
 8001106:	200b      	movs	r0, #11
 8001108:	f001 f995 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800110c:	200b      	movs	r0, #11
 800110e:	f001 f9ae 	bl	800246e <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_GPIO_Init+0x40>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <MX_GPIO_Init+0x40>)
 800112c:	f043 0320 	orr.w	r3, r3, #32
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_GPIO_Init+0x40>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_GPIO_Init+0x40>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <MX_GPIO_Init+0x40>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <MX_GPIO_Init+0x40>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000

08001164 <Update_Duty_Cycle>:

/* USER CODE BEGIN 4 */
void Update_Duty_Cycle(uint16_t DutyCycle)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
    TIM2->CCR2=DutyCycle;
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	6393      	str	r3, [r2, #56]	; 0x38
    TIM2->CCR1=TIM2->ARR-TIM2->CCR2;
 8001176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001182:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	634b      	str	r3, [r1, #52]	; 0x34
//    TIM3->CNT;
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <GetTickUs>:

uint16_t GetTickUs()
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
    return TIM3->CNT;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <GetTickUs+0x14>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	b29b      	uxth	r3, r3
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40000400 	.word	0x40000400

080011ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_ADC_ConvCpltCallback+0x74>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12b      	bne.n	8001216 <HAL_ADC_ConvCpltCallback+0x6a>
    {
    	uint16_t averageData = averageAll(data);
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <HAL_ADC_ConvCpltCallback+0x78>)
 80011c0:	f7ff fc8c 	bl	8000adc <averageAll>
 80011c4:	4603      	mov	r3, r0
 80011c6:	81fb      	strh	r3, [r7, #14]
    	inputVoltageADC = adcToVoltage(averageData);
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fcac 	bl	8000b28 <adcToVoltage>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4914      	ldr	r1, [pc, #80]	; (8001228 <HAL_ADC_ConvCpltCallback+0x7c>)
 80011d6:	e9c1 2300 	strd	r2, r3, [r1]
    	PID_Compute(&VoltagePID);
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <HAL_ADC_ConvCpltCallback+0x80>)
 80011dc:	f003 fb30 	bl	8004840 <PID_Compute>
    	tempDutyCycle = outputVoltageADC*UNIT_DUTY_CYCLE;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_ConvCpltCallback+0x84>)
 80011e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_ADC_ConvCpltCallback+0x88>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f96c 	bl	80004c8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fc00 	bl	80009fc <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001200:	6013      	str	r3, [r2, #0]
    	Update_Duty_Cycle(tempDutyCycle);
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc48 	bl	8000a9c <__aeabi_f2uiz>
 800120c:	4603      	mov	r3, r0
 800120e:	b29b      	uxth	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffa7 	bl	8001164 <Update_Duty_Cycle>
    }
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012400 	.word	0x40012400
 8001224:	20000290 	.word	0x20000290
 8001228:	20000280 	.word	0x20000280
 800122c:	20000048 	.word	0x20000048
 8001230:	20000288 	.word	0x20000288
 8001234:	20000008 	.word	0x20000008
 8001238:	20000278 	.word	0x20000278

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_MspInit+0x40>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_MspInit+0x40>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_MspInit+0x40>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_MspInit+0x40>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_MspInit+0x40>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_MspInit+0x40>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_ADC_MspInit+0xbc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d149      	bne.n	8001340 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a26      	ldr	r2, [pc, #152]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012dc:	2310      	movs	r3, #16
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4819      	ldr	r0, [pc, #100]	; (8001350 <HAL_ADC_MspInit+0xc4>)
 80012ec:	f001 fac8 	bl	8002880 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_ADC_MspInit+0xcc>)
 80012f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001316:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 800131a:	2220      	movs	r2, #32
 800131c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001326:	f001 f8bd 	bl	80024a4 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001330:	f7ff ff84 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001338:	621a      	str	r2, [r3, #32]
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40012400 	.word	0x40012400
 800134c:	40021000 	.word	0x40021000
 8001350:	40010800 	.word	0x40010800
 8001354:	200000f0 	.word	0x200000f0
 8001358:	40020008 	.word	0x40020008

0800135c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_CAN_MspInit+0x8c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d131      	bne.n	80013e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_CAN_MspInit+0x90>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_CAN_MspInit+0x90>)
 8001382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_CAN_MspInit+0x90>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_CAN_MspInit+0x90>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_CAN_MspInit+0x90>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_CAN_MspInit+0x90>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_CAN_MspInit+0x94>)
 80013c2:	f001 fa5d 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_CAN_MspInit+0x94>)
 80013dc:	f001 fa50 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40006400 	.word	0x40006400
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800

080013f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d10c      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_TIM_Base_MspInit+0x58>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_TIM_Base_MspInit+0x58>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_Base_MspInit+0x58>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800141e:	e010      	b.n	8001442 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_TIM_Base_MspInit+0x5c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10b      	bne.n	8001442 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_TIM_Base_MspInit+0x58>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_TIM_Base_MspInit+0x58>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_TIM_Base_MspInit+0x58>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40000400 	.word	0x40000400

08001454 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_TIM_OC_MspInit+0x34>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10b      	bne.n	800147e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_TIM_OC_MspInit+0x38>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_TIM_OC_MspInit+0x38>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_TIM_OC_MspInit+0x38>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40000800 	.word	0x40000800
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ae:	d117      	bne.n	80014e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_TIM_MspPostInit+0x58>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_TIM_MspPostInit+0x58>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_TIM_MspPostInit+0x58>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c8:	2303      	movs	r3, #3
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <HAL_TIM_MspPostInit+0x5c>)
 80014dc:	f001 f9d0 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <HAL_UART_MspInit+0x8c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d131      	bne.n	8001574 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x90>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_UART_MspInit+0x90>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x90>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x90>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x90>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_UART_MspInit+0x90>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001556:	f001 f993 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001570:	f001 f986 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013800 	.word	0x40013800
 8001580:	40021000 	.word	0x40021000
 8001584:	40010800 	.word	0x40010800

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ce:	f000 f87f 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Channel1_IRQHandler+0x10>)
 80015de:	f001 f81b 	bl	8002618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000f0 	.word	0x200000f0

080015ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800161e:	f7ff ffe5 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f003 fba9 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7ff faa5 	bl	8000b74 <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001634:	08004e28 	.word	0x08004e28
  ldr r2, =_sbss
 8001638:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800163c:	200002a8 	.word	0x200002a8

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x28>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 fee3 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fdf2 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fefb 	bl	800248a <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 fec3 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000018 	.word	0x20000018
 80016c8:	20000020 	.word	0x20000020
 80016cc:	2000001c 	.word	0x2000001c

080016d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x1c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x20>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x20>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000020 	.word	0x20000020
 80016f0:	200002a4 	.word	0x200002a4

080016f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_GetTick+0x10>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	200002a4 	.word	0x200002a4

08001708 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0be      	b.n	80018a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fda0 	bl	800128c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fb4b 	bl	8001de8 <ADC_ConversionStop_Disable>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 8099 	bne.w	8001896 <HAL_ADC_Init+0x18e>
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 8095 	bne.w	8001896 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001774:	f023 0302 	bic.w	r3, r3, #2
 8001778:	f043 0202 	orr.w	r2, r3, #2
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001788:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b1b      	ldrb	r3, [r3, #12]
 800178e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001790:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4313      	orrs	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_Init+0xa2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_ADC_Init+0xa8>
 80017aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ae:	e000      	b.n	80017b2 <HAL_ADC_Init+0xaa>
 80017b0:	2300      	movs	r3, #0
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7d1b      	ldrb	r3, [r3, #20]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d119      	bne.n	80017f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	035a      	lsls	r2, r3, #13
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e00b      	b.n	80017f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f043 0220 	orr.w	r2, r3, #32
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_ADC_Init+0x1a8>)
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	430b      	orrs	r3, r1
 800181a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001824:	d003      	beq.n	800182e <HAL_ADC_Init+0x126>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d104      	bne.n	8001838 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	3b01      	subs	r3, #1
 8001834:	051b      	lsls	r3, r3, #20
 8001836:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	430a      	orrs	r2, r1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_ADC_Init+0x1ac>)
 8001854:	4013      	ands	r3, r2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d10b      	bne.n	8001874 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001872:	e018      	b.n	80018a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	f023 0312 	bic.w	r3, r3, #18
 800187c:	f043 0210 	orr.w	r2, r3, #16
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001894:	e007      	b.n	80018a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	ffe1f7fd 	.word	0xffe1f7fd
 80018b4:	ff1f0efe 	.word	0xff1f0efe

080018b8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a64      	ldr	r2, [pc, #400]	; (8001a60 <HAL_ADC_Start_DMA+0x1a8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_ADC_Start_DMA+0x24>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a63      	ldr	r2, [pc, #396]	; (8001a64 <HAL_ADC_Start_DMA+0x1ac>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d106      	bne.n	80018ea <HAL_ADC_Start_DMA+0x32>
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_ADC_Start_DMA+0x1a8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 80b3 	bne.w	8001a50 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_Start_DMA+0x40>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e0ae      	b.n	8001a56 <HAL_ADC_Start_DMA+0x19e>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 fa17 	bl	8001d34 <ADC_Enable>
 8001906:	4603      	mov	r3, r0
 8001908:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 809a 	bne.w	8001a46 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_ADC_Start_DMA+0x1ac>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d105      	bne.n	800193c <HAL_ADC_Start_DMA+0x84>
 8001930:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_ADC_Start_DMA+0x1a8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d115      	bne.n	8001968 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001952:	2b00      	cmp	r3, #0
 8001954:	d026      	beq.n	80019a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800195e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001966:	e01d      	b.n	80019a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <HAL_ADC_Start_DMA+0x1a8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d004      	beq.n	8001988 <HAL_ADC_Start_DMA+0xd0>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <HAL_ADC_Start_DMA+0x1ac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10d      	bne.n	80019a4 <HAL_ADC_Start_DMA+0xec>
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_ADC_Start_DMA+0x1a8>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800199c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	f023 0206 	bic.w	r2, r3, #6
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_ADC_Start_DMA+0x1b0>)
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <HAL_ADC_Start_DMA+0x1b4>)
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <HAL_ADC_Start_DMA+0x1b8>)
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0202 	mvn.w	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a18      	ldr	r0, [r3, #32]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	334c      	adds	r3, #76	; 0x4c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f000 fda3 	bl	8002558 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a20:	d108      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a30:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a32:	e00f      	b.n	8001a54 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a42:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a44:	e006      	b.n	8001a54 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a4e:	e001      	b.n	8001a54 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40012400 	.word	0x40012400
 8001a64:	40012800 	.word	0x40012800
 8001a68:	08001e6b 	.word	0x08001e6b
 8001a6c:	08001ee7 	.word	0x08001ee7
 8001a70:	08001f03 	.word	0x08001f03

08001a74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x20>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e0dc      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1da>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d81c      	bhi.n	8001b02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	221f      	movs	r2, #31
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4019      	ands	r1, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b05      	subs	r3, #5
 8001af4:	fa00 f203 	lsl.w	r2, r0, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
 8001b00:	e03c      	b.n	8001b7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d81c      	bhi.n	8001b44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b23      	subs	r3, #35	; 0x23
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4019      	ands	r1, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b23      	subs	r3, #35	; 0x23
 8001b36:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
 8001b42:	e01b      	b.n	8001b7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b41      	subs	r3, #65	; 0x41
 8001b56:	221f      	movs	r2, #31
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4019      	ands	r1, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b41      	subs	r3, #65	; 0x41
 8001b70:	fa00 f203 	lsl.w	r2, r0, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d91c      	bls.n	8001bbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	3b1e      	subs	r3, #30
 8001b96:	2207      	movs	r2, #7
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4019      	ands	r1, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6898      	ldr	r0, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	3b1e      	subs	r3, #30
 8001bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	e019      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6919      	ldr	r1, [r3, #16]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	2207      	movs	r2, #7
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6898      	ldr	r0, [r3, #8]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d003      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bfe:	2b11      	cmp	r3, #17
 8001c00:	d132      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_ADC_ConfigChannel+0x1e4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d125      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d126      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d11a      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9a      	lsrs	r2, r3, #18
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c48:	e002      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f9      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x1b2>
 8001c56:	e007      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f043 0220 	orr.w	r2, r3, #32
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40012400 	.word	0x40012400
 8001c80:	20000018 	.word	0x20000018
 8001c84:	431bde83 	.word	0x431bde83

08001c88 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d003      	beq.n	8001ca4 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_ADC_AnalogWDGConfig+0xa4>)
 8001ca2:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_AnalogWDGConfig+0x2a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e035      	b.n	8001d1e <HAL_ADC_AnalogWDGConfig+0x96>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7a1b      	ldrb	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e007      	b.n	8001ce4 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce2:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6811      	ldr	r1, [r2, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	6852      	ldr	r2, [r2, #4]
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	68d2      	ldr	r2, [r2, #12]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6912      	ldr	r2, [r2, #16]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	00800200 	.word	0x00800200
 8001d2c:	00400200 	.word	0x00400200
 8001d30:	ff3ffde0 	.word	0xff3ffde0

08001d34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d040      	beq.n	8001dd4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <ADC_Enable+0xac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <ADC_Enable+0xb0>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9b      	lsrs	r3, r3, #18
 8001d6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d70:	e002      	b.n	8001d78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d7e:	f7ff fcb9 	bl	80016f4 <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d84:	e01f      	b.n	8001dc6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d86:	f7ff fcb5 	bl	80016f4 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d918      	bls.n	8001dc6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d011      	beq.n	8001dc6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e007      	b.n	8001dd6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d1d8      	bne.n	8001d86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000018 	.word	0x20000018
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d12e      	bne.n	8001e60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e12:	f7ff fc6f 	bl	80016f4 <HAL_GetTick>
 8001e16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e18:	e01b      	b.n	8001e52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e1a:	f7ff fc6b 	bl	80016f4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d914      	bls.n	8001e52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10d      	bne.n	8001e52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e007      	b.n	8001e62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d0dc      	beq.n	8001e1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d127      	bne.n	8001ed4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e9e:	d115      	bne.n	8001ecc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d111      	bne.n	8001ecc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff f96d 	bl	80011ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ed2:	e004      	b.n	8001ede <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7ff fdbd 	bl	8001a74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fdac 	bl	8001a86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADCEx_Calibration_Start+0x1e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e095      	b.n	8002082 <HAL_ADCEx_Calibration_Start+0x14a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff42 	bl	8001de8 <ADC_ConversionStop_Disable>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 8084 	bne.w	8002078 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f78:	f023 0302 	bic.w	r3, r3, #2
 8001f7c:	f043 0202 	orr.w	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_ADCEx_Calibration_Start+0x154>)
 8001f86:	681c      	ldr	r4, [r3, #0]
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f001 facd 	bl	8003528 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f94:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001f96:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fec4 	bl	8001d34 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0208 	orr.w	r2, r2, #8
 8001fba:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001fbc:	f7ff fb9a 	bl	80016f4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fc2:	e01b      	b.n	8001ffc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fc4:	f7ff fb96 	bl	80016f4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b0a      	cmp	r3, #10
 8001fd0:	d914      	bls.n	8001ffc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f023 0312 	bic.w	r3, r3, #18
 8001fe8:	f043 0210 	orr.w	r2, r3, #16
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e042      	b.n	8002082 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1dc      	bne.n	8001fc4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0204 	orr.w	r2, r2, #4
 8002018:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800201a:	f7ff fb6b 	bl	80016f4 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002020:	e01b      	b.n	800205a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002022:	f7ff fb67 	bl	80016f4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b0a      	cmp	r3, #10
 800202e:	d914      	bls.n	800205a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f023 0312 	bic.w	r3, r3, #18
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e013      	b.n	8002082 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1dc      	bne.n	8002022 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f023 0303 	bic.w	r3, r3, #3
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002080:	7dfb      	ldrb	r3, [r7, #23]
}
 8002082:	4618      	mov	r0, r3
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	bf00      	nop
 800208c:	20000018 	.word	0x20000018

08002090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0ed      	b.n	800227e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f954 	bl	800135c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c4:	f7ff fb16 	bl	80016f4 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ca:	e012      	b.n	80020f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020cc:	f7ff fb12 	bl	80016f4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b0a      	cmp	r3, #10
 80020d8:	d90b      	bls.n	80020f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2205      	movs	r2, #5
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0c5      	b.n	800227e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0e5      	beq.n	80020cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0202 	bic.w	r2, r2, #2
 800210e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002110:	f7ff faf0 	bl	80016f4 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002116:	e012      	b.n	800213e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002118:	f7ff faec 	bl	80016f4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d90b      	bls.n	800213e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e09f      	b.n	800227e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e5      	bne.n	8002118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e007      	b.n	8002176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7e5b      	ldrb	r3, [r3, #25]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d108      	bne.n	8002190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e007      	b.n	80021a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800219e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e9b      	ldrb	r3, [r3, #26]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e007      	b.n	80021ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0220 	bic.w	r2, r2, #32
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7edb      	ldrb	r3, [r3, #27]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0210 	bic.w	r2, r2, #16
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e007      	b.n	80021f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0210 	orr.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7f1b      	ldrb	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d108      	bne.n	800220e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0208 	orr.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e007      	b.n	800221e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0208 	bic.w	r2, r2, #8
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7f5b      	ldrb	r3, [r3, #29]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d108      	bne.n	8002238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0204 	orr.w	r2, r2, #4
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e007      	b.n	8002248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4906      	ldr	r1, [pc, #24]	; (8002320 <__NVIC_EnableIRQ+0x34>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff90 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff2d 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff42 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff90 	bl	8002378 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5f 	bl	8002324 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff35 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e043      	b.n	8002542 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_DMA_Init+0xa8>)
 80024c2:	4413      	add	r3, r2
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_DMA_Init+0xac>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	009a      	lsls	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <HAL_DMA_Init+0xb0>)
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	bffdfff8 	.word	0xbffdfff8
 8002550:	cccccccd 	.word	0xcccccccd
 8002554:	40020000 	.word	0x40020000

08002558 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Start_IT+0x20>
 8002574:	2302      	movs	r3, #2
 8002576:	e04a      	b.n	800260e <HAL_DMA_Start_IT+0xb6>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002586:	2b01      	cmp	r3, #1
 8002588:	d13a      	bne.n	8002600 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f938 	bl	8002824 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 020e 	orr.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e00f      	b.n	80025ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0204 	bic.w	r2, r2, #4
 80025dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 020a 	orr.w	r2, r2, #10
 80025ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e005      	b.n	800260c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2204      	movs	r2, #4
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d04f      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xc8>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d04a      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a66      	ldr	r2, [pc, #408]	; (8002808 <HAL_DMA_IRQHandler+0x1f0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d029      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xae>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_DMA_IRQHandler+0x1f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xaa>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a63      	ldr	r2, [pc, #396]	; (8002810 <HAL_DMA_IRQHandler+0x1f8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01a      	beq.n	80026bc <HAL_DMA_IRQHandler+0xa4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a62      	ldr	r2, [pc, #392]	; (8002814 <HAL_DMA_IRQHandler+0x1fc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d012      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x9e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_DMA_IRQHandler+0x200>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00a      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x98>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5f      	ldr	r2, [pc, #380]	; (800281c <HAL_DMA_IRQHandler+0x204>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d102      	bne.n	80026aa <HAL_DMA_IRQHandler+0x92>
 80026a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a8:	e00e      	b.n	80026c8 <HAL_DMA_IRQHandler+0xb0>
 80026aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026ae:	e00b      	b.n	80026c8 <HAL_DMA_IRQHandler+0xb0>
 80026b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b4:	e008      	b.n	80026c8 <HAL_DMA_IRQHandler+0xb0>
 80026b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026ba:	e005      	b.n	80026c8 <HAL_DMA_IRQHandler+0xb0>
 80026bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c0:	e002      	b.n	80026c8 <HAL_DMA_IRQHandler+0xb0>
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	e000      	b.n	80026c8 <HAL_DMA_IRQHandler+0xb0>
 80026c6:	2304      	movs	r3, #4
 80026c8:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_DMA_IRQHandler+0x208>)
 80026ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8094 	beq.w	80027fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026de:	e08e      	b.n	80027fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2202      	movs	r2, #2
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d056      	beq.n	800279e <HAL_DMA_IRQHandler+0x186>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d051      	beq.n	800279e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020a 	bic.w	r2, r2, #10
 8002716:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a38      	ldr	r2, [pc, #224]	; (8002808 <HAL_DMA_IRQHandler+0x1f0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d029      	beq.n	800277e <HAL_DMA_IRQHandler+0x166>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a37      	ldr	r2, [pc, #220]	; (800280c <HAL_DMA_IRQHandler+0x1f4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_DMA_IRQHandler+0x162>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a35      	ldr	r2, [pc, #212]	; (8002810 <HAL_DMA_IRQHandler+0x1f8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01a      	beq.n	8002774 <HAL_DMA_IRQHandler+0x15c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_DMA_IRQHandler+0x1fc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d012      	beq.n	800276e <HAL_DMA_IRQHandler+0x156>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a32      	ldr	r2, [pc, #200]	; (8002818 <HAL_DMA_IRQHandler+0x200>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00a      	beq.n	8002768 <HAL_DMA_IRQHandler+0x150>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a31      	ldr	r2, [pc, #196]	; (800281c <HAL_DMA_IRQHandler+0x204>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d102      	bne.n	8002762 <HAL_DMA_IRQHandler+0x14a>
 800275c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002760:	e00e      	b.n	8002780 <HAL_DMA_IRQHandler+0x168>
 8002762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002766:	e00b      	b.n	8002780 <HAL_DMA_IRQHandler+0x168>
 8002768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800276c:	e008      	b.n	8002780 <HAL_DMA_IRQHandler+0x168>
 800276e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002772:	e005      	b.n	8002780 <HAL_DMA_IRQHandler+0x168>
 8002774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002778:	e002      	b.n	8002780 <HAL_DMA_IRQHandler+0x168>
 800277a:	2320      	movs	r3, #32
 800277c:	e000      	b.n	8002780 <HAL_DMA_IRQHandler+0x168>
 800277e:	2302      	movs	r3, #2
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_DMA_IRQHandler+0x208>)
 8002782:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d034      	beq.n	80027fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800279c:	e02f      	b.n	80027fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2208      	movs	r2, #8
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d028      	beq.n	8002800 <HAL_DMA_IRQHandler+0x1e8>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 020e 	bic.w	r2, r2, #14
 80027c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f202 	lsl.w	r2, r1, r2
 80027d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
    }
  }
  return;
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
}
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40020008 	.word	0x40020008
 800280c:	4002001c 	.word	0x4002001c
 8002810:	40020030 	.word	0x40020030
 8002814:	40020044 	.word	0x40020044
 8002818:	40020058 	.word	0x40020058
 800281c:	4002006c 	.word	0x4002006c
 8002820:	40020000 	.word	0x40020000

08002824 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d108      	bne.n	8002864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002862:	e007      	b.n	8002874 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	60da      	str	r2, [r3, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b08b      	sub	sp, #44	; 0x2c
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	e169      	b.n	8002b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002894:	2201      	movs	r2, #1
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8158 	bne.w	8002b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a9a      	ldr	r2, [pc, #616]	; (8002b20 <HAL_GPIO_Init+0x2a0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d05e      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028bc:	4a98      	ldr	r2, [pc, #608]	; (8002b20 <HAL_GPIO_Init+0x2a0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d875      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028c2:	4a98      	ldr	r2, [pc, #608]	; (8002b24 <HAL_GPIO_Init+0x2a4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d058      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028c8:	4a96      	ldr	r2, [pc, #600]	; (8002b24 <HAL_GPIO_Init+0x2a4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d86f      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028ce:	4a96      	ldr	r2, [pc, #600]	; (8002b28 <HAL_GPIO_Init+0x2a8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d052      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028d4:	4a94      	ldr	r2, [pc, #592]	; (8002b28 <HAL_GPIO_Init+0x2a8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d869      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028da:	4a94      	ldr	r2, [pc, #592]	; (8002b2c <HAL_GPIO_Init+0x2ac>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04c      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028e0:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_GPIO_Init+0x2ac>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d863      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028e6:	4a92      	ldr	r2, [pc, #584]	; (8002b30 <HAL_GPIO_Init+0x2b0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d046      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028ec:	4a90      	ldr	r2, [pc, #576]	; (8002b30 <HAL_GPIO_Init+0x2b0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d85d      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d82a      	bhi.n	800294c <HAL_GPIO_Init+0xcc>
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d859      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <HAL_GPIO_Init+0x80>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	0800297b 	.word	0x0800297b
 8002904:	08002955 	.word	0x08002955
 8002908:	08002967 	.word	0x08002967
 800290c:	080029a9 	.word	0x080029a9
 8002910:	080029af 	.word	0x080029af
 8002914:	080029af 	.word	0x080029af
 8002918:	080029af 	.word	0x080029af
 800291c:	080029af 	.word	0x080029af
 8002920:	080029af 	.word	0x080029af
 8002924:	080029af 	.word	0x080029af
 8002928:	080029af 	.word	0x080029af
 800292c:	080029af 	.word	0x080029af
 8002930:	080029af 	.word	0x080029af
 8002934:	080029af 	.word	0x080029af
 8002938:	080029af 	.word	0x080029af
 800293c:	080029af 	.word	0x080029af
 8002940:	080029af 	.word	0x080029af
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002971 	.word	0x08002971
 800294c:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <HAL_GPIO_Init+0x2b4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002952:	e02c      	b.n	80029ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e029      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	623b      	str	r3, [r7, #32]
          break;
 8002964:	e024      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	3308      	adds	r3, #8
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e01f      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	330c      	adds	r3, #12
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e01a      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002982:	2304      	movs	r3, #4
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e013      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002990:	2308      	movs	r3, #8
 8002992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	611a      	str	r2, [r3, #16]
          break;
 800299a:	e009      	b.n	80029b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800299c:	2308      	movs	r3, #8
 800299e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	615a      	str	r2, [r3, #20]
          break;
 80029a6:	e003      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
          break;
 80029ac:	e000      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          break;
 80029ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d801      	bhi.n	80029ba <HAL_GPIO_Init+0x13a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	e001      	b.n	80029be <HAL_GPIO_Init+0x13e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2bff      	cmp	r3, #255	; 0xff
 80029c4:	d802      	bhi.n	80029cc <HAL_GPIO_Init+0x14c>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x152>
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3b08      	subs	r3, #8
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	210f      	movs	r1, #15
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	401a      	ands	r2, r3
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80b1 	beq.w	8002b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a00:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a4c      	ldr	r2, [pc, #304]	; (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a18:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_GPIO_Init+0x2bc>)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	; (8002b40 <HAL_GPIO_Init+0x2c0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3f      	ldr	r2, [pc, #252]	; (8002b44 <HAL_GPIO_Init+0x2c4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00d      	beq.n	8002a68 <HAL_GPIO_Init+0x1e8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3e      	ldr	r2, [pc, #248]	; (8002b48 <HAL_GPIO_Init+0x2c8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <HAL_GPIO_Init+0x1e4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3d      	ldr	r2, [pc, #244]	; (8002b4c <HAL_GPIO_Init+0x2cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_GPIO_Init+0x1e0>
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a7e:	492f      	ldr	r1, [pc, #188]	; (8002b3c <HAL_GPIO_Init+0x2bc>)
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	492c      	ldr	r1, [pc, #176]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4928      	ldr	r1, [pc, #160]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4922      	ldr	r1, [pc, #136]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	491e      	ldr	r1, [pc, #120]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	4918      	ldr	r1, [pc, #96]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4914      	ldr	r1, [pc, #80]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d021      	beq.n	8002b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
 8002b1c:	e021      	b.n	8002b62 <HAL_GPIO_Init+0x2e2>
 8002b1e:	bf00      	nop
 8002b20:	10320000 	.word	0x10320000
 8002b24:	10310000 	.word	0x10310000
 8002b28:	10220000 	.word	0x10220000
 8002b2c:	10210000 	.word	0x10210000
 8002b30:	10120000 	.word	0x10120000
 8002b34:	10110000 	.word	0x10110000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010800 	.word	0x40010800
 8002b44:	40010c00 	.word	0x40010c00
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_GPIO_Init+0x304>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	4909      	ldr	r1, [pc, #36]	; (8002b84 <HAL_GPIO_Init+0x304>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f ae8e 	bne.w	8002894 <HAL_GPIO_Init+0x14>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	372c      	adds	r7, #44	; 0x2c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e272      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba8:	4b92      	ldr	r3, [pc, #584]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d00c      	beq.n	8002bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb4:	4b8f      	ldr	r3, [pc, #572]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d112      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5e>
 8002bc0:	4b8c      	ldr	r3, [pc, #560]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bce:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d06c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x12c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d168      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e24c      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x76>
 8002bf0:	4b80      	ldr	r3, [pc, #512]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7f      	ldr	r2, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e02e      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b78      	ldr	r3, [pc, #480]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0xbc>
 8002c2a:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a71      	ldr	r2, [pc, #452]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002c44:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6a      	ldr	r2, [pc, #424]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a67      	ldr	r2, [pc, #412]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fd46 	bl	80016f4 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fd42 	bl	80016f4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e200      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe4>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fd32 	bl	80016f4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fd2e 	bl	80016f4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1ec      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x10c>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cce:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x18c>
 8002cda:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x176>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1c0      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4939      	ldr	r1, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fe fce7 	bl	80016f4 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fce3 	bl	80016f4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1a1      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4927      	ldr	r1, [pc, #156]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x270>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fcc6 	bl	80016f4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fcc2 	bl	80016f4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e180      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03a      	beq.n	8002e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_RCC_OscConfig+0x274>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe fca6 	bl	80016f4 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fca2 	bl	80016f4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e160      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f000 fad8 	bl	8003380 <RCC_Delay>
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_OscConfig+0x274>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fc8c 	bl	80016f4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dde:	e00f      	b.n	8002e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fc88 	bl	80016f4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e146      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	42420000 	.word	0x42420000
 8002dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b92      	ldr	r3, [pc, #584]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e9      	bne.n	8002de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a6 	beq.w	8002f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a87      	ldr	r2, [pc, #540]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCC_OscConfig+0x4c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x4c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x4c8>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fc49 	bl	80016f4 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe fc45 	bl	80016f4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e103      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4c8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x312>
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a6e      	ldr	r2, [pc, #440]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x334>
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a66      	ldr	r2, [pc, #408]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x356>
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a60      	ldr	r2, [pc, #384]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002ede:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a5a      	ldr	r2, [pc, #360]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a57      	ldr	r2, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7fe fbf9 	bl	80016f4 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe fbf5 	bl	80016f4 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0b1      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCC_OscConfig+0x37e>
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fbe3 	bl	80016f4 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe fbdf 	bl	80016f4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e09b      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b3c      	ldr	r3, [pc, #240]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8087 	beq.w	800307e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d061      	beq.n	8003040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d146      	bne.n	8003012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fbb3 	bl	80016f4 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe fbaf 	bl	80016f4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e06d      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4921      	ldr	r1, [pc, #132]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a19      	ldr	r1, [r3, #32]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	491b      	ldr	r1, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe fb83 	bl	80016f4 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe fb7f 	bl	80016f4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e03d      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x46a>
 8003010:	e035      	b.n	800307e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fb6c 	bl	80016f4 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fb68 	bl	80016f4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e026      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x4c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x498>
 800303e:	e01e      	b.n	800307e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e019      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
 8003054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_OscConfig+0x500>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	429a      	cmp	r2, r3
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4965      	ldr	r1, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800310a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e073      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4936      	ldr	r1, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe faba 	bl	80016f4 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fab6 	bl	80016f4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e053      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1cc>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fa18 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	08004e08 	.word	0x08004e08
 8003258:	20000018 	.word	0x20000018
 800325c:	2000001c 	.word	0x2000001c

08003260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <HAL_RCC_GetSysClockFreq+0xac>)
 8003268:	1d3c      	adds	r4, r7, #4
 800326a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800326c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003270:	f240 2301 	movw	r3, #513	; 0x201
 8003274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb0>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x46>
 800329e:	e02b      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	e02b      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	3328      	adds	r3, #40	; 0x28
 80032b0:	443b      	add	r3, r7
 80032b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0c5b      	lsrs	r3, r3, #17
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	3328      	adds	r3, #40	; 0x28
 80032ce:	443b      	add	r3, r7
 80032d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032da:	fb03 f202 	mul.w	r2, r3, r2
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e004      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	623b      	str	r3, [r7, #32]
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc90      	pop	{r4, r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	08004de8 	.word	0x08004de8
 8003310:	40021000 	.word	0x40021000
 8003314:	007a1200 	.word	0x007a1200
 8003318:	003d0900 	.word	0x003d0900

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000018 	.word	0x20000018

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	08004e18 	.word	0x08004e18

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffde 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08004e18 	.word	0x08004e18

08003380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <RCC_Delay+0x34>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <RCC_Delay+0x38>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	0a5b      	lsrs	r3, r3, #9
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800339c:	bf00      	nop
  }
  while (Delay --);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e5a      	subs	r2, r3, #1
 80033a2:	60fa      	str	r2, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f9      	bne.n	800339c <RCC_Delay+0x1c>
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	20000018 	.word	0x20000018
 80033b8:	10624dd3 	.word	0x10624dd3

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d07d      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033dc:	4b4f      	ldr	r3, [pc, #316]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b4c      	ldr	r3, [pc, #304]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a4b      	ldr	r2, [pc, #300]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f2:	61d3      	str	r3, [r2, #28]
 80033f4:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b46      	ldr	r3, [pc, #280]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d118      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a42      	ldr	r2, [pc, #264]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7fe f96a 	bl	80016f4 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	e008      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe f966 	bl	80016f4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e06d      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003442:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02e      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d027      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003460:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346a:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe f935 	bl	80016f4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe f931 	bl	80016f4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e036      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4917      	ldr	r1, [pc, #92]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	490b      	ldr	r1, [pc, #44]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4904      	ldr	r1, [pc, #16]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	42420440 	.word	0x42420440

08003528 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b08d      	sub	sp, #52	; 0x34
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003530:	4b58      	ldr	r3, [pc, #352]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003532:	f107 040c 	add.w	r4, r7, #12
 8003536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800353c:	f240 2301 	movw	r3, #513	; 0x201
 8003540:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	2300      	movs	r3, #0
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b10      	cmp	r3, #16
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b10      	cmp	r3, #16
 8003560:	f200 808e 	bhi.w	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d049      	beq.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d079      	beq.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003570:	e086      	b.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003578:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d07f      	beq.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	3330      	adds	r3, #48	; 0x30
 800358e:	443b      	add	r3, r7
 8003590:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003594:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d017      	beq.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a0:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c5b      	lsrs	r3, r3, #17
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	3330      	adds	r3, #48	; 0x30
 80035ac:	443b      	add	r3, r7
 80035ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035be:	4a37      	ldr	r2, [pc, #220]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e6:	d102      	bne.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035ec:	e04a      	b.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035fc:	e042      	b.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d108      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003620:	e01f      	b.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d109      	bne.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800363a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003640:	e00f      	b.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364c:	d11c      	bne.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800365a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003660:	e012      	b.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003662:	e011      	b.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003664:	f7ff fe78 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0b9b      	lsrs	r3, r3, #14
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	3301      	adds	r3, #1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003688:	bf00      	nop
    }
  }
  return (frequency);
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800368c:	4618      	mov	r0, r3
 800368e:	3734      	adds	r7, #52	; 0x34
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	08004df8 	.word	0x08004df8
 8003698:	40021000 	.word	0x40021000
 800369c:	007a1200 	.word	0x007a1200
 80036a0:	003d0900 	.word	0x003d0900
 80036a4:	aaaaaaab 	.word	0xaaaaaaab

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e041      	b.n	800373e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fe90 	bl	80013f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 fc3e 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_Base_Start+0x88>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start+0x48>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start+0x48>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_TIM_Base_Start+0x8c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start+0x48>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_TIM_Base_Start+0x90>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fe26 	bl	8001454 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fba4 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_TIM_OC_Start+0x24>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e022      	b.n	80038e6 <HAL_TIM_OC_Start+0x6a>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d109      	bne.n	80038ba <HAL_TIM_OC_Start+0x3e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e015      	b.n	80038e6 <HAL_TIM_OC_Start+0x6a>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d109      	bne.n	80038d4 <HAL_TIM_OC_Start+0x58>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e008      	b.n	80038e6 <HAL_TIM_OC_Start+0x6a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e05e      	b.n	80039ac <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_OC_Start+0x82>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	e013      	b.n	8003926 <HAL_TIM_OC_Start+0xaa>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d104      	bne.n	800390e <HAL_TIM_OC_Start+0x92>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800390c:	e00b      	b.n	8003926 <HAL_TIM_OC_Start+0xaa>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d104      	bne.n	800391e <HAL_TIM_OC_Start+0xa2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800391c:	e003      	b.n	8003926 <HAL_TIM_OC_Start+0xaa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fd9a 	bl	8004468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_TIM_OC_Start+0x138>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d107      	bne.n	800394e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_TIM_OC_Start+0x138>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIM_OC_Start+0xfa>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d009      	beq.n	8003976 <HAL_TIM_OC_Start+0xfa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <HAL_TIM_OC_Start+0x13c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIM_OC_Start+0xfa>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_TIM_OC_Start+0x140>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d111      	bne.n	800399a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d010      	beq.n	80039aa <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	e007      	b.n	80039aa <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800

080039c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e041      	b.n	8003a56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f839 	bl	8003a5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fab2 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_TIM_PWM_Start+0x24>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e022      	b.n	8003ada <HAL_TIM_PWM_Start+0x6a>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d109      	bne.n	8003aae <HAL_TIM_PWM_Start+0x3e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e015      	b.n	8003ada <HAL_TIM_PWM_Start+0x6a>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_PWM_Start+0x58>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e008      	b.n	8003ada <HAL_TIM_PWM_Start+0x6a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e05e      	b.n	8003ba0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIM_PWM_Start+0x82>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af0:	e013      	b.n	8003b1a <HAL_TIM_PWM_Start+0xaa>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d104      	bne.n	8003b02 <HAL_TIM_PWM_Start+0x92>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	e00b      	b.n	8003b1a <HAL_TIM_PWM_Start+0xaa>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_PWM_Start+0xa2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b10:	e003      	b.n	8003b1a <HAL_TIM_PWM_Start+0xaa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fca0 	bl	8004468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_TIM_PWM_Start+0x138>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_TIM_PWM_Start+0x138>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIM_PWM_Start+0xfa>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d009      	beq.n	8003b6a <HAL_TIM_PWM_Start+0xfa>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a14      	ldr	r2, [pc, #80]	; (8003bac <HAL_TIM_PWM_Start+0x13c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIM_PWM_Start+0xfa>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <HAL_TIM_PWM_Start+0x140>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d010      	beq.n	8003b9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8c:	e007      	b.n	8003b9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800

08003bb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_OC_ConfigChannel+0x1a>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e046      	b.n	8003c5c <HAL_TIM_OC_ConfigChannel+0xa8>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d839      	bhi.n	8003c50 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003c51 	.word	0x08003c51
 8003bec:	08003c51 	.word	0x08003c51
 8003bf0:	08003c51 	.word	0x08003c51
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	08003c51 	.word	0x08003c51
 8003bfc:	08003c51 	.word	0x08003c51
 8003c00:	08003c51 	.word	0x08003c51
 8003c04:	08003c35 	.word	0x08003c35
 8003c08:	08003c51 	.word	0x08003c51
 8003c0c:	08003c51 	.word	0x08003c51
 8003c10:	08003c51 	.word	0x08003c51
 8003c14:	08003c43 	.word	0x08003c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fa04 	bl	800402c <TIM_OC1_SetConfig>
      break;
 8003c24:	e015      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fa63 	bl	80040f8 <TIM_OC2_SetConfig>
      break;
 8003c32:	e00e      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fac6 	bl	80041cc <TIM_OC3_SetConfig>
      break;
 8003c40:	e007      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fb29 	bl	80042a0 <TIM_OC4_SetConfig>
      break;
 8003c4e:	e000      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e0ac      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	f200 809f 	bhi.w	8003dcc <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003dcd 	.word	0x08003dcd
 8003c9c:	08003dcd 	.word	0x08003dcd
 8003ca0:	08003dcd 	.word	0x08003dcd
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003dcd 	.word	0x08003dcd
 8003cac:	08003dcd 	.word	0x08003dcd
 8003cb0:	08003dcd 	.word	0x08003dcd
 8003cb4:	08003d4b 	.word	0x08003d4b
 8003cb8:	08003dcd 	.word	0x08003dcd
 8003cbc:	08003dcd 	.word	0x08003dcd
 8003cc0:	08003dcd 	.word	0x08003dcd
 8003cc4:	08003d8b 	.word	0x08003d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f9ac 	bl	800402c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0208 	orr.w	r2, r2, #8
 8003ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0204 	bic.w	r2, r2, #4
 8003cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6999      	ldr	r1, [r3, #24]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	619a      	str	r2, [r3, #24]
      break;
 8003d06:	e062      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f9f2 	bl	80040f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	619a      	str	r2, [r3, #24]
      break;
 8003d48:	e041      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fa3b 	bl	80041cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0208 	orr.w	r2, r2, #8
 8003d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0204 	bic.w	r2, r2, #4
 8003d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69d9      	ldr	r1, [r3, #28]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	61da      	str	r2, [r3, #28]
      break;
 8003d88:	e021      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fa85 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69d9      	ldr	r1, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	021a      	lsls	r2, r3, #8
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	61da      	str	r2, [r3, #28]
      break;
 8003dca:	e000      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIM_ConfigClockSource+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0b3      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x180>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e30:	d03e      	beq.n	8003eb0 <HAL_TIM_ConfigClockSource+0xd0>
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e36:	f200 8087 	bhi.w	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	f000 8085 	beq.w	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d87f      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e48:	2b70      	cmp	r3, #112	; 0x70
 8003e4a:	d01a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0xa2>
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d87b      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e50:	2b60      	cmp	r3, #96	; 0x60
 8003e52:	d050      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x116>
 8003e54:	2b60      	cmp	r3, #96	; 0x60
 8003e56:	d877      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e58:	2b50      	cmp	r3, #80	; 0x50
 8003e5a:	d03c      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0xf6>
 8003e5c:	2b50      	cmp	r3, #80	; 0x50
 8003e5e:	d873      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d058      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x136>
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d86f      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e68:	2b30      	cmp	r3, #48	; 0x30
 8003e6a:	d064      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x156>
 8003e6c:	2b30      	cmp	r3, #48	; 0x30
 8003e6e:	d86b      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d060      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x156>
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d867      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x156>
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d05a      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e80:	e062      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f000 faca 	bl	800442a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	609a      	str	r2, [r3, #8]
      break;
 8003eae:	e04e      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f000 fab3 	bl	800442a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed2:	609a      	str	r2, [r3, #8]
      break;
 8003ed4:	e03b      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f000 fa2a 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2150      	movs	r1, #80	; 0x50
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa81 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e02b      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f000 fa48 	bl	8004398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2160      	movs	r1, #96	; 0x60
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fa71 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003f14:	e01b      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 fa0a 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa61 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003f34:	e00b      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f000 fa58 	bl	80043f6 <TIM_ITRx_SetConfig>
        break;
 8003f46:	e002      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a29      	ldr	r2, [pc, #164]	; (8004020 <TIM_Base_SetConfig+0xb8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <TIM_Base_SetConfig+0x30>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d007      	beq.n	8003f98 <TIM_Base_SetConfig+0x30>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a26      	ldr	r2, [pc, #152]	; (8004024 <TIM_Base_SetConfig+0xbc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0x30>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a25      	ldr	r2, [pc, #148]	; (8004028 <TIM_Base_SetConfig+0xc0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d108      	bne.n	8003faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <TIM_Base_SetConfig+0xb8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0x62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <TIM_Base_SetConfig+0xbc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0x62>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <TIM_Base_SetConfig+0xc0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a07      	ldr	r2, [pc, #28]	; (8004020 <TIM_Base_SetConfig+0xb8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d103      	bne.n	8004010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	615a      	str	r2, [r3, #20]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800

0800402c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0302 	bic.w	r3, r3, #2
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <TIM_OC1_SetConfig+0xc8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d10c      	bne.n	80040a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0308 	bic.w	r3, r3, #8
 800408e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <TIM_OC1_SetConfig+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00

080040f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0320 	bic.w	r3, r3, #32
 8004142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <TIM_OC2_SetConfig+0xd0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10d      	bne.n	8004174 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <TIM_OC2_SetConfig+0xd0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	40012c00 	.word	0x40012c00

080041cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <TIM_OC3_SetConfig+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <TIM_OC3_SetConfig+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d113      	bne.n	8004276 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40012c00 	.word	0x40012c00

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <TIM_OC4_SetConfig+0x98>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	40012c00 	.word	0x40012c00

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f023 0210 	bic.w	r2, r3, #16
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004444:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4313      	orrs	r3, r2
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2201      	movs	r2, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	43db      	mvns	r3, r3
 800448a:	401a      	ands	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e046      	b.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a16      	ldr	r2, [pc, #88]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d009      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a10      	ldr	r2, [pc, #64]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10c      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4313      	orrs	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800

0800456c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e03f      	b.n	80045fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc ffac 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	; 0x24
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f829 	bl	8004608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004642:	f023 030c 	bic.w	r3, r3, #12
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	430b      	orrs	r3, r1
 800464e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <UART_SetConfig+0x114>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7fe fe72 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	e002      	b.n	800467e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe fe5a 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 800467c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	0119      	lsls	r1, r3, #4
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009a      	lsls	r2, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <UART_SetConfig+0x118>)
 80046b6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2064      	movs	r0, #100	; 0x64
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	; 0x32
 80046c8:	4a15      	ldr	r2, [pc, #84]	; (8004720 <UART_SetConfig+0x118>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d4:	4419      	add	r1, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009a      	lsls	r2, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <UART_SetConfig+0x118>)
 80046ee:	fba3 0302 	umull	r0, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2064      	movs	r0, #100	; 0x64
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a07      	ldr	r2, [pc, #28]	; (8004720 <UART_SetConfig+0x118>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	440a      	add	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013800 	.word	0x40013800
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <PID_Init>:
﻿#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastError = *uPID->MySetpoint - *uPID->MyInput;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb fd05 	bl	8000158 <__aeabi_dsub>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004764:	f7fc f940 	bl	80009e8 <__aeabi_dcmpgt>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <PID_Init+0x58>
	{
		uPID->OutputSum = uPID->OutMax;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 800477a:	e011      	b.n	80047a0 <PID_Init+0x7c>
	else if (uPID->OutputSum < uPID->OutMin)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004788:	f7fc f910 	bl	80009ac <__aeabi_dcmplt>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d100      	bne.n	8004794 <PID_Init+0x70>
}
 8004792:	e005      	b.n	80047a0 <PID_Init+0x7c>
		uPID->OutputSum = uPID->OutMin;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af06      	add	r7, sp, #24
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80047ce:	a31a      	add	r3, pc, #104	; (adr r3, 8004838 <PID+0x90>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	e9cd 2300 	strd	r2, r3, [sp]
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f936 	bl	8004a52 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2264      	movs	r2, #100	; 0x64
 80047ea:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80047ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047f0:	4619      	mov	r1, r3
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fa44 	bl	8004c80 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80047f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004802:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800480a:	e9cd 2300 	strd	r2, r3, [sp]
 800480e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f98c 	bl	8004b30 <PID_SetTunings2>
	
	uPID->LastTime = GetTickUs() - uPID->SampleTime;
 8004818:	f7fc fcbc 	bl	8001194 <GetTickUs>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
	
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	f3af 8000 	nop.w
 8004838:	00000000 	.word	0x00000000
 800483c:	406fe000 	.word	0x406fe000

08004840 <PID_Compute>:
//	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
//}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004840:	b5b0      	push	{r4, r5, r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	double error;
	double dError;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <PID_Compute+0x14>
	{
		return _FALSE;
 8004850:	2300      	movs	r3, #0
 8004852:	e0dc      	b.n	8004a0e <PID_Compute+0x1ce>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTickUs();
 8004854:	f7fc fc9e 	bl	8001194 <GetTickUs>
 8004858:	4603      	mov	r3, r0
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	429a      	cmp	r2, r3
 800486e:	f0c0 80cd 	bcc.w	8004a0c <PID_Compute+0x1cc>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488a:	f7fb fc65 	bl	8000158 <__aeabi_dsub>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dError  = error - uPID->LastError; //dErr = (*uPID->MySetpoint - input) - (*uPID->MySetpoint - LastInput)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800489c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048a0:	f7fb fc5a 	bl	8000158 <__aeabi_dsub>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum += (uPID->Ki * error);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80048b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048bc:	f7fb fe04 	bl	80004c8 <__aeabi_dmul>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4620      	mov	r0, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7fb fc48 	bl	800015c <__adddf3>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d114      	bne.n	8004908 <PID_Compute+0xc8>
		{
			uPID->OutputSum -= uPID->Kp * dError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80048ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ee:	f7fb fdeb 	bl	80004c8 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fc2d 	bl	8000158 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004914:	f7fc f868 	bl	80009e8 <__aeabi_dcmpgt>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMax;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800492a:	e010      	b.n	800494e <PID_Compute+0x10e>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004938:	f7fc f838 	bl	80009ac <__aeabi_dcmplt>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <PID_Compute+0x10e>
		{
			uPID->OutputSum = uPID->OutMin;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <PID_Compute+0x12e>
		{
			output = uPID->Kp * error;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800495c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004960:	f7fb fdb2 	bl	80004c8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800496c:	e005      	b.n	800497a <PID_Compute+0x13a>
		}
		else
		{
			output = 0;
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum + uPID->Kd * dError;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498a:	f7fb fd9d 	bl	80004c8 <__aeabi_dmul>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fb fbe1 	bl	800015c <__adddf3>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049a2:	f7fb fbdb 	bl	800015c <__adddf3>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80049b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049b8:	f7fc f816 	bl	80009e8 <__aeabi_dcmpgt>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <PID_Compute+0x18e>
		{
			output = uPID->OutMax;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80049c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80049cc:	e00e      	b.n	80049ec <PID_Compute+0x1ac>
		}
		else if (output < uPID->OutMin)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80049d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049d8:	f7fb ffe8 	bl	80009ac <__aeabi_dcmplt>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <PID_Compute+0x1ac>
		{
			output = uPID->OutMin;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80049e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		*uPID->MyOutput = output;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80049f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049f4:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastError = error;
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049fe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <PID_Compute+0x1ce>
		
	}
	else
	{
		return _FALSE;
 8004a0c:	2300      	movs	r3, #0
	}
	
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3730      	adds	r7, #48	; 0x30
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bdb0      	pop	{r4, r5, r7, pc}

08004a16 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <PID_SetMode+0x2e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fe70 	bl	8004724 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	705a      	strb	r2, [r3, #1]
	
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8004a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a66:	f7fb ffb5 	bl	80009d4 <__aeabi_dcmpge>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d158      	bne.n	8004b22 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8004a70:	68f9      	ldr	r1, [r7, #12]
 8004a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a76:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a80:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d04b      	beq.n	8004b24 <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004a9a:	f7fb ffa5 	bl	80009e8 <__aeabi_dcmpgt>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004aae:	e9c1 2300 	strd	r2, r3, [r1]
 8004ab2:	e012      	b.n	8004ada <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ac2:	f7fb ff73 	bl	80009ac <__aeabi_dcmplt>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ad6:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004ae6:	f7fb ff7f 	bl	80009e8 <__aeabi_dcmpgt>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004afc:	e012      	b.n	8004b24 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004b0a:	f7fb ff4f 	bl	80009ac <__aeabi_dcmplt>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004b1a:	68f9      	ldr	r1, [r7, #12]
 8004b1c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004b20:	e000      	b.n	8004b24 <PID_SetOutputLimits+0xd2>
		return;
 8004b22:	bf00      	nop
		}
		else { }
		
	}
	
}
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	0000      	movs	r0, r0
 8004b2c:	0000      	movs	r0, r0
	...

08004b30 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b48:	f7fb ff30 	bl	80009ac <__aeabi_dcmplt>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 808b 	bne.w	8004c6a <PID_SetTunings2+0x13a>
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b60:	f7fb ff24 	bl	80009ac <__aeabi_dcmplt>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d17f      	bne.n	8004c6a <PID_SetTunings2+0x13a>
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b76:	f7fb ff19 	bl	80009ac <__aeabi_dcmplt>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d174      	bne.n	8004c6a <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004b86:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8004b88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ba2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000000;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb fc08 	bl	80003d4 <__aeabi_ui2d>
 8004bc4:	a32c      	add	r3, pc, #176	; (adr r3, 8004c78 <PID_SetTunings2+0x148>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f7fb fda7 	bl	800071c <__aeabi_ddiv>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bdc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8004be0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004be4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004be8:	f7fb fc6e 	bl	80004c8 <__aeabi_dmul>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8004bf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bfe:	f7fb fd8d 	bl	800071c <__aeabi_ddiv>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d12b      	bne.n	8004c6c <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004c1a:	f04f 0000 	mov.w	r0, #0
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	f7fb fa99 	bl	8000158 <__aeabi_dsub>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004c36:	f04f 0000 	mov.w	r0, #0
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	f7fb fa8b 	bl	8000158 <__aeabi_dsub>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	f7fb fa7d 	bl	8000158 <__aeabi_dsub>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004c68:	e000      	b.n	8004c6c <PID_SetTunings2+0x13c>
		return;
 8004c6a:	bf00      	nop
		
	}
	
}
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	f3af 8000 	nop.w
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	412e8480 	.word	0x412e8480

08004c80 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02e      	beq.n	8004cf2 <PID_SetControllerDirection+0x72>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d029      	beq.n	8004cf2 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	f7fb fa54 	bl	8000158 <__aeabi_dsub>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	f7fb fa46 	bl	8000158 <__aeabi_dsub>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004cdc:	f04f 0000 	mov.w	r0, #0
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	f7fb fa38 	bl	8000158 <__aeabi_dsub>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	70da      	strb	r2, [r3, #3]
	
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dd2e      	ble.n	8004d6e <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004d10:	6838      	ldr	r0, [r7, #0]
 8004d12:	f7fb fb6f 	bl	80003f4 <__aeabi_i2d>
 8004d16:	4604      	mov	r4, r0
 8004d18:	460d      	mov	r5, r1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fb58 	bl	80003d4 <__aeabi_ui2d>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fcf6 	bl	800071c <__aeabi_ddiv>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d42:	f7fb fbc1 	bl	80004c8 <__aeabi_dmul>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d5a:	f7fb fcdf 	bl	800071c <__aeabi_ddiv>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	4d0c      	ldr	r5, [pc, #48]	; (8004db0 <__libc_init_array+0x38>)
 8004d7e:	4c0d      	ldr	r4, [pc, #52]	; (8004db4 <__libc_init_array+0x3c>)
 8004d80:	1b64      	subs	r4, r4, r5
 8004d82:	10a4      	asrs	r4, r4, #2
 8004d84:	42a6      	cmp	r6, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	f000 f822 	bl	8004dd0 <_init>
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	4d0a      	ldr	r5, [pc, #40]	; (8004db8 <__libc_init_array+0x40>)
 8004d90:	4c0a      	ldr	r4, [pc, #40]	; (8004dbc <__libc_init_array+0x44>)
 8004d92:	1b64      	subs	r4, r4, r5
 8004d94:	10a4      	asrs	r4, r4, #2
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da0:	4798      	blx	r3
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004daa:	4798      	blx	r3
 8004dac:	3601      	adds	r6, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08004e20 	.word	0x08004e20
 8004db4:	08004e20 	.word	0x08004e20
 8004db8:	08004e20 	.word	0x08004e20
 8004dbc:	08004e24 	.word	0x08004e24

08004dc0 <memset>:
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4402      	add	r2, r0
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d100      	bne.n	8004dca <memset+0xa>
 8004dc8:	4770      	bx	lr
 8004dca:	f803 1b01 	strb.w	r1, [r3], #1
 8004dce:	e7f9      	b.n	8004dc4 <memset+0x4>

08004dd0 <_init>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr

08004ddc <_fini>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr
